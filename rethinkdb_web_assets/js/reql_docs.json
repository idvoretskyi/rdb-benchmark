{"sections": [{"order": 0, "commands": [{"description": "The toplevel RQL namespace.", "parent": null, "returns": "r", "tag": "r", "langs": {"py": {"body": "", "dont_need_parenthesis": true, "name": "r", "examples": [{"dataset": null, "code": "import rethinkdb as r", "description": "Setup your top level namespace.", "can_try": false}]}, "rb": {"body": "", "dont_need_parenthesis": true, "name": "r", "examples": [{"dataset": null, "code": "require 'rethinkdb'\ninclude RethinkDB::Shortcuts\n", "description": "Setup your top level namespace.", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": true, "name": "r", "examples": [{"dataset": null, "code": "var r = require('rethinkdb');", "description": "Setup your top level namespace.", "can_try": false}]}}, "order": 26}, {"description": "Create a new connection to the database server.<br /><br />If the\nconnection cannot be established, a <code>RqlDriverError</code> exception will\nbe thrown.\n", "parent": "r", "returns": "connection", "tag": "connect", "langs": {"py": {"body": "host='localhost', port=28015, db='test'", "dont_need_parenthesis": false, "name": "connect", "examples": [{"dataset": null, "code": "conn = r.connect(db='heroes')", "description": "Opens a connection using the default host and port but specifying the default database.", "can_try": false}]}, "rb": {"body": "host='localhost', port=28015, default_db='test'", "dont_need_parenthesis": false, "name": "connect", "examples": [{"dataset": null, "code": "conn = r.connect('localhost', 28015, 'heroes')", "description": "Opens a connection to localhost:28015 with 'heroes' as the default database.", "can_try": false}]}, "js": {"body": "opts, callback", "dont_need_parenthesis": false, "name": "connect", "examples": [{"dataset": null, "code": "r.connect({host:'localhost', port:28015, db:'marvel'},\n     function(err, conn) { ... })\n", "description": "Opens a new connection to the database.", "can_try": false}]}}, "order": 27}, {"description": "Set the default connection to make REPL use easier. Allows calling\n<code>run()</code> without specifying a connection. <br/><br />\nConnection objects are not thread safe and <code>repl</code> connections\nshould not be used in multi-threaded environments.\n", "parent": "connection", "returns": null, "tag": "repl", "langs": {"py": {"body": "", "dont_need_parenthesis": false, "name": "repl", "examples": [{"dataset": null, "code": "r.connect().repl()\nr.table('users').run()\n", "description": "Set the default connection in REPL, and call `run()`\nwithout specifying the connection.\n", "can_try": false}]}, "rb": {"body": "", "dont_need_parenthesis": false, "name": "repl", "examples": [{"dataset": null, "code": "r.connect().repl\nr.table('users').run\n", "description": "Set the default connection in REPL, and call `run()`\nwithout specifying the connection.\n", "can_try": false}]}, "js": {"examples": [{"dataset": null, "code": "", "description": "Set the default connection in REPL, and call `run()`\nwithout specifying the connection.\n", "can_try": false}]}}, "order": 28}, {"description": "Close an open connection. Closing a connection cancels all outstanding\nrequests and frees the memory associated with the open requests.\n", "parent": "connection", "returns": null, "tag": "close", "langs": {"py": {"body": "", "dont_need_parenthesis": false, "name": "close", "examples": [{"dataset": null, "code": "conn.close()", "description": "Close an open connection.", "can_try": false}]}, "rb": {"body": "", "dont_need_parenthesis": false, "name": "close", "examples": [{"dataset": null, "code": "conn.close", "description": "Close an open connection.", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": false, "name": "close", "examples": [{"dataset": null, "code": "conn.close()", "description": "Close an open connection.", "can_try": false}]}}, "order": 29}, {"description": "Close and attempt to reopen a connection. Has the effect of canceling\nany outstanding request while keeping the connection open.\n", "parent": "connection", "returns": null, "tag": "reconnect", "langs": {"py": {"body": "", "dont_need_parenthesis": false, "name": "reconnect", "examples": [{"dataset": null, "code": "conn.reconnect()", "description": "Cancel outstanding requests/queries that are no longer needed.", "can_try": false}]}, "rb": {"body": "", "dont_need_parenthesis": false, "name": "reconnect", "examples": [{"dataset": null, "code": "conn.reconnect", "description": "Cancel outstanding requests/queries that are no longer needed.", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": false, "name": "reconnect", "examples": [{"dataset": null, "code": "conn.reconnect(function(err, conn) { ... })", "description": "Cancel outstanding requests/queries that are no longer needed.", "can_try": false}]}}, "order": 30}, {"description": "Change the default database on this connection.", "parent": "connection", "returns": null, "tag": "use", "langs": {"py": {"body": "dbName", "dont_need_parenthesis": false, "name": "use", "examples": [{"dataset": null, "code": "conn.use('heroes')", "description": "Change the default database so that we don't need\nto specify the database when referencing a table.\n", "can_try": false}]}, "rb": {"body": "dbName", "dont_need_parenthesis": false, "name": "use", "examples": [{"dataset": null, "code": "conn.use('heroes')", "description": "Change the default database so that we don't need\nto specify the database when referencing a table.\n", "can_try": false}]}, "js": {"body": "dbName", "dont_need_parenthesis": false, "name": "use", "examples": [{"dataset": null, "code": "conn.use('heroes')", "description": "Change the default database so that we don't need\nto specify the database when referencing a table.\n", "can_try": false}]}}, "order": 31}, {"description": "Run a query on a connection.", "parent": "query", "returns": "cursor", "tag": "run", "langs": {"py": {"body": "conn[, use_outdated=False]", "dont_need_parenthesis": false, "name": "run", "examples": [{"dataset": null, "code": "for doc in r.table('marvel').run(conn):\n  print doc\n", "description": "Call run on the connection with a query to execute the query.\nThe callback will get a cursor from which results may be retrieved.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').run(conn, use_outdated=True)", "description": "If you are OK with potentially out of date data from all the tables\ninvolved in this query and want potentially faster reads, pass a flag\nallowing out of date data in an options object.  Settings for\nindividual tables will supercede this global setting for all tables\nin the query.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').run(conn, noreply=True)", "description": "If you just want to send a write and forget about it, you\ncan set `noreply` to true in the options.  In this case\n`run` will return immediately.\n", "can_try": false}]}, "rb": {"body": "conn[, opts]", "dont_need_parenthesis": false, "name": "run", "examples": [{"dataset": null, "code": "r.table('marvel').run(conn).each{|x| p x}", "description": "Call run on the connection with a query to execute the query.\nThe callback will get a cursor from which results may be retrieved.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').run(conn, :use_outdated => true)", "description": "If you are OK with potentially out of date data from all the tables\ninvolved in this query and want potentially faster reads, pass a flag\nallowing out of date data in an options object.  Settings for\nindividual tables will supercede this global setting for all tables\nin the query.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').run(conn, :noreply => true)", "description": "If you just want to send a write and forget about it, you\ncan set `noreply` to true in the options.  In this case\n`run` will return immediately.\n", "can_try": false}]}, "js": {"body": "conn[, callback]", "dont_need_parenthesis": false, "name": "run", "examples": [{"dataset": null, "code": "r.table('marvel').run(conn, function(err, cur) { cur.each(console.log); })", "description": "Call run on the connection with a query to execute the query.\nThe callback will get a cursor from which results may be retrieved.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').run({connection:conn, useOutdated:true},\n                      function (err, cursor) { ... });\n", "description": "If you are OK with potentially out of date data from all the tables\ninvolved in this query and want potentially faster reads, pass a flag\nallowing out of date data in an options object.  Settings for\nindividual tables will supercede this global setting for all tables\nin the query.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').run({connection:conn, noreply:true},\n                      function (err, cursor) { ... });\n", "description": "If you just want to send a write and forget about it, you\ncan set `noreply` to true in the options.  In this case\n`run` will return immediately.\n", "can_try": false}]}}, "order": 32}, {"description": "Get the next element in the cursor.", "parent": "cursor", "returns": null, "tag": "next", "langs": {"py": {"examples": [{"dataset": null, "code": "cur.next(function(err, row) {\n  return processRow(row);\n});\n", "description": "Let's grab the next element!", "can_try": false}]}, "rb": {"examples": [{"dataset": null, "code": "cur.next(function(err, row) {\n  return processRow(row);\n});\n", "description": "Let's grab the next element!", "can_try": false}]}, "js": {"body": "callback", "dont_need_parenthesis": false, "name": "next", "examples": [{"dataset": null, "code": "cur.next(function(err, row) {\n  return processRow(row);\n});\n", "description": "Let's grab the next element!", "can_try": false}]}}, "order": 33}, {"description": "Check if there are more elements in the cursor.", "parent": "cursor", "returns": "bool", "tag": "hasNext", "langs": {"py": {"examples": [{"dataset": null, "code": "var hasMore = cur.hasNext();", "description": "Are there more elements in the cursor?", "can_try": false}]}, "rb": {"examples": [{"dataset": null, "code": "var hasMore = cur.hasNext();", "description": "Are there more elements in the cursor?", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": false, "name": "hasNext", "examples": [{"dataset": null, "code": "var hasMore = cur.hasNext();", "description": "Are there more elements in the cursor?", "can_try": false}]}}, "order": 34}, {"description": "Lazily iterate over the result set one element at a time.", "parent": "cursor", "returns": null, "tag": "each", "langs": {"py": {"examples": [{"dataset": null, "code": "cur.each(function(err, row) {\n  return processRow(row);\n});\n", "description": "Let's process all the elements!", "can_try": false}]}, "rb": {"examples": [{"dataset": null, "code": "cur.each(function(err, row) {\n  return processRow(row);\n});\n", "description": "Let's process all the elements!", "can_try": false}]}, "js": {"body": "callback", "dont_need_parenthesis": false, "name": "each", "examples": [{"dataset": null, "code": "cur.each(function(err, row) {\n  return processRow(row);\n});\n", "description": "Let's process all the elements!", "can_try": false}]}}, "order": 35}, {"description": "Retrieve all results and pass them as an array to the given callback.", "parent": "cursor", "returns": null, "tag": "toArray", "langs": {"py": {"examples": [{"dataset": null, "code": "cur.toArray(function(err, results) {\n  for(var i in results) {\n    processRow(results[i]);\n  }\n});\n", "description": "For small result sets it may be more convenient to process them at once as an array.", "can_try": false}]}, "rb": {"examples": [{"dataset": null, "code": "cur.toArray(function(err, results) {\n  for(var i in results) {\n    processRow(results[i]);\n  }\n});\n", "description": "For small result sets it may be more convenient to process them at once as an array.", "can_try": false}]}, "js": {"body": "callback", "dont_need_parenthesis": false, "name": "toArray", "examples": [{"dataset": null, "code": "cur.toArray(function(err, results) {\n  for(var i in results) {\n    processRow(results[i]);\n  }\n});\n", "description": "For small result sets it may be more convenient to process them at once as an array.", "can_try": false}]}}, "order": 36}], "tag": "module", "name": "Accessing RQL", "description": "All RQL queries begin from the top level module."}, {"order": 1, "commands": [{"description": "Create a database. A RethinkDB database is a collection of tables,\nsimilar to relational databases.<br /><br />If successful, the operation returns\nan object: <code>{created: 1}</code>. If a database with the same name already\nexists the operation throws <code>RqlRuntimeError</code>.\n", "parent": "r", "returns": "json", "tag": "db_create", "langs": {"py": {"body": "db_name", "dont_need_parenthesis": false, "name": "db_create", "examples": [{"dataset": null, "code": "r.db_create('superheroes').run(conn)", "description": "Create a database named 'superheroes'.", "can_try": false}]}, "rb": {"body": "db_name", "dont_need_parenthesis": false, "name": "db_create", "examples": [{"dataset": null, "code": "r.db_create('superheroes').run(conn)", "description": "Create a database named 'superheroes'.", "can_try": false}]}, "js": {"body": "dbName", "dont_need_parenthesis": false, "name": "dbCreate", "examples": [{"dataset": "marvel", "code": "r.dbCreate('superheroes').run(conn, callback)", "description": "Create a database named 'superheroes'.", "can_try": true}]}}, "order": 51}, {"description": "Drop a database. The database, all its tables, and corresponding\ndata will be deleted.<br /><br />If successful, the operation returns the object\n<code>{dropped: 1}</code>. If the specified database doesn't exist a <code>RqlRuntimeError</code>\nis thrown.\n", "parent": "r", "returns": "json", "tag": "db_drop", "langs": {"py": {"body": "db_name", "dont_need_parenthesis": false, "name": "db_drop", "examples": [{"dataset": null, "code": "r.db_drop('superheroes').run(conn)", "description": "Drop a database named 'superheroes'.", "can_try": false}]}, "rb": {"body": "db_name", "dont_need_parenthesis": false, "name": "db_drop", "examples": [{"dataset": null, "code": "r.db_drop('superheroes').run(conn)", "description": "Drop a database named 'superheroes'.", "can_try": false}]}, "js": {"body": "dbName", "dont_need_parenthesis": false, "name": "dbDrop", "examples": [{"dataset": "marvel", "code": "r.dbDrop('superheroes').run(conn, callback)", "description": "Drop a database named 'superheroes'.", "can_try": true}]}}, "order": 52}, {"description": "List all database names in the system.<br /><br />\nThe result is a list of strings.\n", "parent": "r", "returns": "sequence", "tag": "db_list", "langs": {"py": {"body": "", "dont_need_parenthesis": false, "name": "db_list", "examples": [{"dataset": null, "code": "r.db_list().run(conn)", "description": "List all databases.", "can_try": false}]}, "rb": {"body": "", "dont_need_parenthesis": true, "name": "db_list", "examples": [{"dataset": null, "code": "r.db_list.run(conn)", "description": "List all databases.", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": false, "name": "dbList", "examples": [{"dataset": "marvel", "code": "r.dbList().run(conn, callback)", "description": "List all databases.", "can_try": true}]}}, "order": 53}], "tag": "db_admin", "name": "Manipulating databases", "description": "These commands allow database manipulation."}, {"order": 2, "commands": [{"description": "Create a table. A RethinkDB table is a collection of JSON documents.\n<br /><br />If successful, the operation returns an object: <code>{created: 1}</code>.  If\na table with the same name already exists, the operation throws <code>RqlRuntimeError</code>.\n<br /><br />When creating a table you can specify the following options:\n<ul>\n<li><code>primary_key</code>(string): the name of the primary key. The default primary key is <code>id</code>;</li>\n<li><code>hard_durability</code>(boolean): if set to <code>false</code>, this enables <strong>soft durability</strong>\n on this table: writes will be acknowledged by the server immediately and flushed to disk in the background. \n Default is <code>true</code> (hard durability);</li>\n<li><code>cache_size</code>(number): set the cache size (in MB) to be used by the table. Default is 1024MB;</li>\n<li><code>datacenter</code>(string): the name of the datacenter this table should be assigned to.</li>\n</ul>\n<br /><br />In Javascript, these options can use either the underscore or camelcase form (e.g. primaryKey, hardDurability).\n", "parent": "db", "returns": "json", "tag": "table_create", "langs": {"py": {"body": "tableName[, options]", "dont_need_parenthesis": false, "name": "table_create", "examples": [{"dataset": null, "code": "r.db('test').table_create('dc_universe').run(conn)", "description": "Create a table named 'dc_universe' with the primary key set to field 'id'.\nIf a new document doesn't contain the field 'id', the database will\nautogenerate a value for it.\n", "can_try": false}, {"dataset": null, "code": "r.db('test').table_create('dc_universe', primary_key='name').run(conn)", "description": "Create a table named 'dc_universe' using the field 'name'\nas primary key.\n", "can_try": false}, {"dataset": null, "code": "r.db('test').table_create('hero_actions', hard_durability=False).run(conn)", "description": "Create a table to log the very fast actions of the heroes.\n", "can_try": false}]}, "rb": {"body": "tableName[, options]", "dont_need_parenthesis": false, "name": "table_create", "examples": [{"dataset": null, "code": "r.db('test').table_create('dc_universe').run(conn)", "description": "Create a table named 'dc_universe' with the primary key set to field 'id'.\nIf a new document doesn't contain the field 'id', the database will\nautogenerate a value for it.\n", "can_try": false}, {"dataset": null, "code": "r.db('test').table_create('dc_universe', :primary_key => 'name').run(conn)", "description": "Create a table named 'dc_universe' using the field 'name'\nas primary key.\n", "can_try": false}, {"dataset": null, "code": "r.db('test').table_create('dc_universe', :hard_durability => false).run(conn)", "description": "Create a table to log the very fast actions of the heroes.\n", "can_try": false}]}, "js": {"body": "tableName[, options]", "dont_need_parenthesis": false, "name": "tableCreate", "examples": [{"dataset": "marvel", "code": "r.db('test').tableCreate('dc_universe').run(conn, callback)", "description": "Create a table named 'dc_universe' with the primary key set to field 'id'.\nIf a new document doesn't contain the field 'id', the database will\nautogenerate a value for it.\n", "can_try": true}, {"dataset": "marvel", "code": "r.db('test').tableCreate('dc_universe', {primaryKey:'name'}).run(conn, callback)", "description": "Create a table named 'dc_universe' using the field 'name'\nas primary key.\n", "can_try": true}, {"dataset": "marvel", "code": "r.db('test').tableCreate('dc_universe', {hardDurability:false}).run(conn, callback)", "description": "Create a table to log the very fast actions of the heroes.\n", "can_try": true}]}}, "order": 45}, {"description": "Drop a table. The table and all its data will be deleted.<br /><br\n/>If succesful, the operation returns an object: <code>{dropped: 1}</code>.\nIf the specified table doesn''t exist a <code>RqlRuntimeError</code> is thrown.\n", "parent": "db", "returns": "json", "tag": "table_drop", "langs": {"py": {"body": "table_name", "dont_need_parenthesis": false, "name": "table_drop", "examples": [{"dataset": null, "code": "r.db('test').table_drop('dc_universe').run(conn)", "description": "Drop a table named 'dc_universe'.", "can_try": false}]}, "rb": {"body": "table_name", "dont_need_parenthesis": false, "name": "table_drop", "examples": [{"dataset": null, "code": "r.db('test').table_drop('dc_universe').run(conn)", "description": "Drop a table named 'dc_universe'.", "can_try": false}]}, "js": {"body": "tableName", "dont_need_parenthesis": false, "name": "tableDrop", "examples": [{"dataset": "marvel", "code": "r.db('test').tableDrop('dc_universe').run(conn, callback)", "description": "Drop a table named 'dc_universe'.", "can_try": true}]}}, "order": 46}, {"description": "List all table names in a database.<br /><br />\nThe result is a list of strings.\n", "parent": "db", "returns": "sequence", "tag": "table_list", "langs": {"py": {"body": "", "dont_need_parenthesis": false, "name": "table_list", "examples": [{"dataset": null, "code": "r.db('test').table_list().run(conn)", "description": "List all tables of the 'test' database.", "can_try": false}]}, "rb": {"body": "", "dont_need_parenthesis": true, "name": "table_list", "examples": [{"dataset": null, "code": "r.db('test').table_list().run(conn)", "description": "List all tables of the 'test' database.", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": false, "name": "tableList", "examples": [{"dataset": "marvel", "code": "r.db('test').tableList().run(conn, callback)", "description": "List all tables of the 'test' database.", "can_try": true}]}}, "order": 47}, {"description": "Create a new secondary index on this table.", "parent": "table", "returns": "json", "tag": "index_create", "langs": {"py": {"body": "index_name[, index_function]", "dont_need_parenthesis": false, "name": "index_create", "examples": [{"dataset": null, "code": "r.table('dc').index_create('code_name').run(conn)", "description": "To efficiently query our heros by name we can create a secondary\nindex based on the value of that field. We can already quickly query\nheros by name with the primary index but to do the same based on hero\ncode names we'll have to create a secondary index based on that\nattribute.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').index_create('power_rating',\n  lambda hero: hero['combat_power'] + (2 * hero['compassion_power'])\n).run(conn)\n", "description": "You can also create a secondary index based on an arbitrary function\non the document.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').index_create('parental_planets',\n  lambda hero: [hero['mothers_home_planet'], hero['fathers_home_planet']]\n).run(conn)\n", "description": "A compound index can be created by returning an array of values to\nuse as the secondary index key.\n", "can_try": false}]}, "rb": {"body": "index_name[, index_function]", "dont_need_parenthesis": false, "name": "index_create", "examples": [{"dataset": null, "code": "r.table('dc').index_create('code_name').run(conn)", "description": "To efficiently query our heros by name we can create a secondary\nindex based on the value of that field. We can already quickly query\nheros by name with the primary index but to do the same based on hero\ncode names we'll have to create a secondary index based on that\nattribute.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').index_create('power_rating') {|hero|\n  hero['combat_power'] + (2 * hero['compassion_power'])\n}.run(conn)\n", "description": "You can also create a secondary index based on an arbitrary function\non the document.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').index_create('parental_planets') {|hero|\n  [hero['mothers_home_planet'], hero['fathers_home_planet']]\n}.run(conn)\n", "description": "A compound index can be created by returning an array of values to\nuse as the secondary index key.\n", "can_try": false}]}, "js": {"body": "indexName[, indexFunction]", "dont_need_parenthesis": false, "name": "indexCreate", "examples": [{"dataset": null, "code": "r.table('dc').indexCreate('code_name').run(conn, callback)", "description": "To efficiently query our heros by name we can create a secondary\nindex based on the value of that field. We can already quickly query\nheros by name with the primary index but to do the same based on hero\ncode names we'll have to create a secondary index based on that\nattribute.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').indexCreate('power_rating', function(hero) {\n  return hero('combat_power').add(hero('compassion_power').mul(2));\n}).run(conn, callback)\n", "description": "You can also create a secondary index based on an arbitrary function\non the document.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').indexCreate('parental_planets', function(hero) {\n  return [hero('mothers_home_planet'), hero('fathers_home_planet')];\n}).run(conn, callback)\n", "description": "A compound index can be created by returning an array of values to\nuse as the secondary index key.\n", "can_try": false}]}}, "order": 48}, {"description": "Delete a previously created secondary index of this table.", "parent": "table", "returns": "json", "tag": "index_drop", "langs": {"py": {"body": "indexName", "dont_need_parenthesis": false, "name": "index_drop", "examples": [{"dataset": null, "code": "r.table('dc').index_drop('code_name').run(conn)", "description": "Drop a secondary index named 'code_name'.", "can_try": false}]}, "rb": {"body": "indexName", "dont_need_parenthesis": false, "name": "index_drop", "examples": [{"dataset": null, "code": "r.table('dc').index_drop('code_name').run(conn)", "description": "Drop a secondary index named 'code_name'.", "can_try": false}]}, "js": {"body": "indexName", "dont_need_parenthesis": false, "name": "indexDrop", "examples": [{"dataset": null, "code": "r.table('dc').indexDrop('code_name').run(conn, callback)", "description": "Drop a secondary index named 'code_name'.", "can_try": false}]}}, "order": 49}, {"description": "List all the secondary indexes of this table.", "parent": "table", "returns": "json", "tag": "index_list", "langs": {"py": {"body": "", "dont_need_parenthesis": false, "name": "index_list", "examples": [{"dataset": null, "code": "r.table('marvel').index_list()", "description": "List the available secondary indexes for this table.", "can_try": false}]}, "rb": {"body": "", "dont_need_parenthesis": false, "name": "index_list", "examples": [{"dataset": null, "code": "r.table('marvel').index_list()", "description": "List the available secondary indexes for this table.", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": false, "name": "indexList", "examples": [{"dataset": null, "code": "r.table('dc').indexList()", "description": "List the available secondary indexes for this table.", "can_try": false}]}}, "order": 50}], "tag": "table_admin", "name": "Manipulating tables", "description": "These commands allow table manipulation."}, {"order": 3, "commands": [{"description": "Insert JSON documents into a table. Accepts a single JSON document\nor an array of documents. <br /><br />\nInsert returns an object that contains the following attributes:\n<ul>\n<li><code>inserted</code> - the number of documents that were succesfully inserted;</li>\n<li><code>replaced</code> - the number of documents that were updated when <code>upsert</code> is used;</li>\n<li><code>unchanged</code> - the number of documents that would have been modified, except that the new\nvalue was the same as the old value when doing an <code>upsert</code>;</li>\n<li><code>errors</code> - the number of errors encountered while inserting;</li>\n<li>if errors where encountered while inserting, <code>first_error</code> contains the text of the first error;</li>\n<li><code>generated_keys</code> - a list of generated primary key values;</li>\n<li><code>deleted</code> and <code>skipped</code> \n- <code>0</code> for an <code>insert</code> operation.</li>\n</ul>\n", "parent": "table", "returns": "object", "tag": "insert", "langs": {"py": {"body": "json | [json][, upsert=False]", "dont_need_parenthesis": false, "name": "insert", "examples": [{"dataset": null, "code": "r.table('marvel').insert(\n    { 'superhero': 'Iron Man', 'superpower':'Arc Reactor' }).run(conn)\n", "description": "Insert a row into a table named 'marvel'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').insert([\n  { 'superhero': 'Wolverine', 'superpower': 'Adamantium' },\n  { 'superhero': 'Spiderman', 'superpower': 'spidy sense' }\n]).run(conn)\n", "description": "Insert multiple rows into a table named 'marvel'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').insert(\n  { 'superhero': 'Iron Man', 'superpower': 'Arc Reactor' },\n  upsert=True\n).run(conn)\n", "description": "Insert a row into a table named 'marvel', overwriting if the document already exists.", "can_try": false}]}, "rb": {"body": "json | [json][, :upsert]", "dont_need_parenthesis": false, "name": "insert", "examples": [{"dataset": null, "code": "r.table('marvel').insert(\n    { :superhero => 'Iron Man', :superpower => 'Arc Reactor' }).run(conn)\n", "description": "Insert a row into a table named 'marvel'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').insert([\n  {:superhero => 'Wolverine', :superpower => 'Adamantium'},\n  {:superhero => 'Spiderman', :superpower => 'spidy sense'}\n]).run(conn)\n", "description": "Insert multiple rows into a table named 'marvel'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').insert(\n  {:superhero => 'Iron Man', :superpower => 'Arc Reactor' },\n  :upsert\n).run(conn)\n", "description": "Insert a row into a table named 'marvel', overwriting if the document already exists.", "can_try": false}]}, "js": {"body": "json | [json][, {upsert:true}]", "dont_need_parenthesis": false, "name": "insert", "examples": [{"dataset": "marvel", "code": "r.table('marvel').insert({ superhero: 'Iron Man', superpower: 'Arc Reactor' })\n .run(conn, callback)\n", "description": "Insert a row into a table named 'marvel'.", "can_try": true}, {"dataset": "marvel", "code": "r.table('marvel').insert([\n  { superhero: 'Wolverine', superpower: 'Adamantium' },\n  { superhero: 'Spiderman', superpower: 'spidy sense' }\n]).run(conn, callback)\n", "description": "Insert multiple rows into a table named 'marvel'.", "can_try": true}, {"dataset": "marvel", "code": "r.table('marvel').insert(\n  { superhero: 'Iron Man', superpower: 'Arc Reactor' },\n  {upsert: true}\n).run(conn, callback)\n", "description": "Insert a row into a table named 'marvel', overwriting if the document already exists.", "can_try": true}]}}, "order": 0}, {"description": "Update JSON documents in a table. Accepts a JSON document, a RQL\nexpression, or a combination of the two.<br /><br />\nUpdate returns an object that contains the following attributes:\n<ul>\n<li><code>replaced</code> - the number of documents that were updated;</li>\n<li><code>unchanged</code> - the number of documents that would have been modified  \nexcept the new value was the same as the old value;</li>\n<li><code>skipped</code> - the number of documents that were left unmodified because\nthere was nothing to do: either the row didn't exist or the new value is null;</li>  \n<li><code>errors</code> - the number of errors encountered while performing the update;</li>\n<li>if errors occured, <code>first_error</code> contains the text of the first error;</li>\n<li><code>deleted</code> and  <code>inserted</code> \n- <code>0</code> for an <code>update</code> operation.</li>\n</ul>\n", "parent": "selection", "returns": "object", "tag": "update", "langs": {"py": {"body": "json | expr", "dont_need_parenthesis": false, "name": "update", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').update({ 'age': 30 }).run(conn)", "description": "Update Superman's age to 30. If attribute 'age' doesn't\nexist, adds it to the document.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').update(lambda x: {'age': x['age'] + 1}).run(conn)", "description": "Increment every superhero's age. If age doesn't exist, throws an error.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').update(\n    lambda x: {'age': x['age'] + r.js('1')}, non_atomic=True).run(conn)\n", "description": "Allow the server to run non-atomic operations.", "can_try": false}]}, "rb": {"body": "json | expr", "dont_need_parenthesis": false, "name": "update", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').update{ {:age => 30} }.run(conn)", "description": "Update Superman's age to 30. If attribute 'age' doesn't\nexist, adds it to the document.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').update{|hero| {:age => hero[:age] + 1}}.run(conn)", "description": "Increment every superhero's age. If age doesn't exist, throws an error.\n", "can_try": false}, {"dataset": null, "code": "r.table('marvel').update(:non_atomic) {|hero| {:age => hero[:age] + r.js('1')}\n }.run(conn)\n", "description": "Allow the server to run non-atomic operations.", "can_try": false}]}, "js": {"body": "json | expr", "dont_need_parenthesis": false, "name": "update", "examples": [{"dataset": "marvel", "code": "r.table('marvel').get('superman').update({ age: 30 }).run(conn, callback)", "description": "Update Superman's age to 30. If attribute 'age' doesn't\nexist, adds it to the document.\n", "can_try": true}, {"dataset": "marvel", "code": "r.table('marvel').update({ age: r.row('age').add(1) }).run(conn, callback)", "description": "Increment every superhero's age. If age doesn't exist, throws an error.\n", "can_try": true}, {"dataset": "marvel", "code": "r.table('marvel').update(\n  { age: r.row('age').add(r.js('1')) },\n  {'nonAtomic':true}\n).run(conn, callback)\n", "description": "Allow the server to run non-atomic operations.", "can_try": true}]}}, "order": 1}, {"description": "Replace documents in a table. Accepts a JSON document or a RQL expression,\nand replaces the original document with the new one. The new document must have\nthe same primary key as the original document.<br /><br />\nReplace returns an object that contains the following attributes:\n<ul>\n<li><code>replaced</code> - the number of documents that were replaced;</li>\n<li><code>unchanged</code> - the number of documents that would have been modified,\nexcept that the new value was the same as the old value;</li>\n<li><code>inserted</code> - the number of new documents added. You can have new documents\ninserted if you do a point-replace on a key that isn't in the table or you do a replace\non a selection and one of the documents you are replacing has been deleted;</li>\n<li><code>deleted</code> - the number of deleted documents when doing a replace with null;</li>\n<li><code>errors</code> - the number of errors encountered while performing the replace;</li>\n<li>if errors occurred performing the replace, <code>first_error</code> contains the text of the first error encountered;</li>\n<li><code>skipped</code> - <code>0</code> for a <code>replace</code> operation.</li>\n</ul>\n", "parent": "selection", "returns": "object", "tag": "replace", "langs": {"py": {"body": "json | expr", "dont_need_parenthesis": false, "name": "replace", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').replace({ 'id': 'superman', 'age': 30 }).run(conn)", "description": "Remove all existing attributes from Superman's document, and add an attribute 'age'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').get('superman').replace(\n    { 'id': 'superman', 'age': 30 }, non_atomic=True).run(conn)\n", "description": "Allow the server to run non-atomic operations.", "can_try": false}, {"dataset": null, "code": "r.table('heroes').filter(r.row['universe'] == 'marvel').replace(\n    lambda hero: hero.merge({'is_fav': True})).run(conn)\n", "description": "Mark all Marvel heroes as favorites.", "can_try": false}]}, "rb": {"body": "json | expr", "dont_need_parenthesis": false, "name": "replace", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').replace{ {:id => 'superman', :age => 30} }.run(conn)", "description": "Remove all existing attributes from Superman's document, and add an attribute 'age'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').get('superman').replace(\n   :non_atomic, {:id => 'superman', :age => 30}).run(conn)\n", "description": "Allow the server to run non-atomic operations.", "can_try": false}, {"dataset": null, "code": "r.table('heroes').filter { |hero| hero[:universe].eq 'marvel'\n }.replace { |hero| hero.merge(:is_fav => true)\n }.run(conn)\n", "description": "Mark all Marvel heroes as favorites.", "can_try": false}]}, "js": {"body": "json | expr", "dont_need_parenthesis": false, "name": "replace", "examples": [{"dataset": "marvel", "code": "r.table('marvel').get('superman').replace({ id: 'superman', age: 30 })\n .run(conn, callback)\n", "description": "Remove all existing attributes from Superman's document, and add an attribute 'age'.", "can_try": true}, {"dataset": "marvel", "code": "r.table('marvel').get('superman').replace({ id: 'superman', age: r.js('30') },\n  { 'nonAtomic': true }\n).run(conn, callback)\n", "description": "Allow the server to run non-atomic operations.", "can_try": true}, {"dataset": null, "code": "r.table('heroes').filter(r.row('universe').eq('marvel'))\n .replace(function(doc) {return doc.merge({is_fav: true})})\n .run(conn, callback)\n", "description": "Mark all Marvel heroes as favorites.", "can_try": false}]}}, "order": 2}, {"description": "Delete one or more documents from a table.<br /><br />\nDelete returns an object that contains the following attributes:\n<ul>\n<li><code>deleted</code> - the number of documents that were deleted;</li>\n<li><code>skipped</code> - the number of documents from the selection that were left unmodified \nbecause there was nothing to do. For example, if you delete a row that has already been deleted, \nthat row will be skipped;</li>\n<li><code>errors</code> - the number of errors encountered while deleting;</li>\n<li>if errors occured, <code>first_error</code> contains the text of the first error;</li>\n<li><code>inserted</code>, <code>replaced</code>, and <code>unchanged</code> - all \n<code>0</code> for a <code>delete</code> operation.</li>\n</ul>\n", "parent": "selection", "returns": "object", "tag": "delete", "langs": {"py": {"body": "", "dont_need_parenthesis": false, "name": "delete", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').delete().run(conn)", "description": "Delete superman from the database.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').delete().run(conn)", "description": "Delete every document from the table 'marvel'.", "can_try": false}]}, "rb": {"body": "", "dont_need_parenthesis": true, "name": "delete", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').delete.run(conn)", "description": "Delete superman from the database.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').delete.run(conn)", "description": "Delete every document from the table 'marvel'.", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": false, "name": "delete", "examples": [{"dataset": "marvel", "code": "r.table('marvel').get('superman').delete().run(conn, callback)", "description": "Delete superman from the database.", "can_try": true}, {"dataset": "marvel", "code": "r.table('marvel').delete().run(conn, callback)", "description": "Delete every document from the table 'marvel'.", "can_try": true}]}}, "order": 3}], "tag": "writing_data", "name": "Writing data", "description": "These commands allow inserting, deleting, and updating data."}, {"order": 4, "commands": [{"description": "Reference a database.", "parent": "r", "returns": "db", "tag": "db", "langs": {"py": {"body": "db_name", "dont_need_parenthesis": false, "name": "db", "examples": [{"dataset": null, "code": "r.db('heroes').table('marvel').run(conn)", "description": "Before we can query a table we have to select the correct database.", "can_try": false}]}, "rb": {"body": "db_name", "dont_need_parenthesis": false, "name": "db", "examples": [{"dataset": null, "code": "r.db('heroes').table('marvel').run(conn)", "description": "Before we can query a table we have to select the correct database.", "can_try": false}]}, "js": {"body": "dbName", "dont_need_parenthesis": false, "name": "db", "examples": [{"dataset": "marvel", "code": "r.db('heroes').table('marvel').run(conn, callback)", "description": "Before we can query a table we have to select the correct database.", "can_try": true}]}}, "order": 54}, {"description": "Select all documents in a table. This command can be chained with\nother commands to do further processing on the data.\n", "parent": "db", "returns": "table", "tag": "table", "langs": {"py": {"body": "name[, use_outdated=False]", "dont_need_parenthesis": false, "name": "table", "examples": [{"dataset": null, "code": "r.table('marvel').run(conn)", "description": "Return all documents in the table 'marvel' of the default database.", "can_try": false}, {"dataset": null, "code": "r.db('heroes').table('marvel').run(conn)", "description": "Return all documents in the table 'marvel' of the database 'heroes'.", "can_try": false}, {"dataset": null, "code": "r.db('heroes').table('marvel', True).run(conn)", "description": "If you are OK with potentially out of date data\nfrom this table and want potentially faster reads, pass\na flag allowing out of date data.\n", "can_try": false}]}, "rb": {"body": "name[, opts]", "dont_need_parenthesis": false, "name": "table", "examples": [{"dataset": null, "code": "r.table('marvel').run(conn)", "description": "Return all documents in the table 'marvel' of the default database.", "can_try": false}, {"dataset": null, "code": "r.db('heroes').table('marvel').run(conn)", "description": "Return all documents in the table 'marvel' of the database 'heroes'.", "can_try": false}, {"dataset": null, "code": "r.db('heroes').table('marvel', {:use_outdated => true}).run(conn)", "description": "If you are OK with potentially out of date data\nfrom this table and want potentially faster reads, pass\na flag allowing out of date data.\n", "can_try": false}]}, "js": {"body": "name[, {useOutdated: false}]", "dont_need_parenthesis": false, "name": "table", "examples": [{"dataset": "marvel", "code": "r.table('marvel').run(conn, callback)", "description": "Return all documents in the table 'marvel' of the default database.", "can_try": true}, {"dataset": "marvel", "code": "r.db('heroes').table('marvel').run(conn, callback)", "description": "Return all documents in the table 'marvel' of the database 'heroes'.", "can_try": true}, {"dataset": "marvel", "code": "r.db('heroes').table('marvel', {useOutdated: true}).run(conn, callback)", "description": "If you are OK with potentially out of date data\nfrom this table and want potentially faster reads, pass\na flag allowing out of date data.\n", "can_try": true}]}}, "order": 55}, {"description": "Get a document by primary key.", "parent": "table", "returns": "json", "tag": "get", "langs": {"py": {"body": "key", "dont_need_parenthesis": false, "name": "get", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').run(conn)", "description": "Find a document with the primary key 'superman'.", "can_try": false}]}, "rb": {"body": "key", "dont_need_parenthesis": false, "name": "get", "examples": [{"dataset": null, "code": "r.table('marvel').get('superman').run(conn)", "description": "Find a document with the primary key 'superman'.", "can_try": false}]}, "js": {"body": "key", "dont_need_parenthesis": false, "name": "get", "examples": [{"dataset": "marvel", "code": "r.table('marvel').get('superman').run(conn, callback)", "description": "Find a document with the primary key 'superman'.", "can_try": true}]}}, "order": 56}, {"description": "Get all documents where the given value matches the value of the requested index.", "parent": "table", "returns": "selection", "tag": "get_all", "langs": {"py": {"body": "key[, index='id']", "dont_need_parenthesis": false, "name": "get_all", "examples": [{"dataset": null, "code": "r.table('marvel').get_all('man_of_steel', index='code_name').run(conn)", "description": "Secondary index keys are not guaranteed to be unique so we cannot\nquery via \"get\" when using a secondary index.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').get_all('superman').run(conn)", "description": "Without an index argument, we default to the primary index. While\n`get` will either return the document or `null` when no document\nwith such a primary key value exists, this will return either a one\nor zero length stream.\n", "can_try": false}]}, "rb": {"body": "key[, :index => 'id']", "dont_need_parenthesis": false, "name": "get_all", "examples": [{"dataset": null, "code": "r.table('marvel').get_all('man_of_steel', :index => 'code_name').run(conn)", "description": "Secondary index keys are not guaranteed to be unique so we cannot\nquery via \"get\" when using a secondary index.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').get_all('superman').run(conn)", "description": "Without an index argument, we default to the primary index. While\n`get` will either return the document or `null` when no document\nwith such a primary key value exists, this will return either a one\nor zero length stream.\n", "can_try": false}]}, "js": {"body": "key[, {index:'id'}]", "dont_need_parenthesis": false, "name": "getAll", "examples": [{"dataset": null, "code": "r.table('marvel').getAll('man_of_steel', {index:'code_name'}).run(conn, callback)", "description": "Secondary index keys are not guaranteed to be unique so we cannot\nquery via \"get\" when using a secondary index.\n", "can_try": false}, {"dataset": null, "code": "r.table('dc').getAll('superman').run(conn, callback)", "description": "Without an index argument, we default to the primary index. While\n`get` will either return the document or `null` when no document\nwith such a primary key value exists, this will return either a one\nor zero length stream.\n", "can_try": false}]}}, "order": 57}, {"description": "Get all documents between two primary keys (both keys are inclusive).", "parent": "selection", "returns": "selection", "tag": "between", "langs": {"py": {"body": "lower_key, upper_key[, index='id']", "dont_need_parenthesis": false, "name": "between", "examples": [{"dataset": null, "code": "r.table('marvel').between(10, 20).run(conn)", "description": "Find all users with primary keys between 10 and 20, inclusive.", "can_try": false}, {"dataset": null, "code": "r.table('dc').between('dark_knight', 'man_of_steel', index='code_name').run(conn)", "description": "Between can be used on secondary indexes too. Just pass an optional index\nargument giving the secondary index to query.\n", "can_try": false}]}, "rb": {"body": "lower_key, upper_key[, :index => 'id']", "dont_need_parenthesis": false, "name": "between", "examples": [{"dataset": null, "code": "r.table('marvel').between(10, 20).run(conn)", "description": "Find all users with primary keys between 10 and 20, inclusive.", "can_try": false}, {"dataset": null, "code": "r.table('dc').between('dark_knight', 'man_of_steel', :index => 'code_name').run(conn)", "description": "Between can be used on secondary indexes too. Just pass an optional index\nargument giving the secondary index to query.\n", "can_try": false}]}, "js": {"body": "lowerKey, upperKey[, {index:'id'}]", "dont_need_parenthesis": false, "name": "between", "examples": [{"dataset": "marvel", "code": "r.table('marvel').between(10, 20).run(conn, callback)", "description": "Find all users with primary keys between 10 and 20, inclusive.", "can_try": true}, {"dataset": null, "code": "r.table('dc').between('dark_knight', 'man_of_steel', {index:'code_name'}).run(conn, callback)", "description": "Between can be used on secondary indexes too. Just pass an optional index\nargument giving the secondary index to query.\n", "can_try": false}]}}, "order": 58}, {"description": "Get all the documents for which the given predicate is true.<br /><br />\n<code>filter</code> can be called on a sequence, selection, or a\nfield containing an array of elements. The return type is the\nsame as the type on which the function was called on.\n", "parent": "selection", "returns": "selection", "tag": "filter", "langs": {"py": {"body": "predicate", "dont_need_parenthesis": false, "name": "filter", "examples": [{"dataset": null, "code": "r.table('users').filter({'active': True, 'age': 30}).run(conn)", "description": "Get all active users aged 30.", "can_try": false}, {"dataset": null, "code": "r.table('users').filter(r.row['magazines'] > 5).run(conn)", "description": "Select all documents where the 'magazines' field is greater than 5.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter(\n    lambda hero: hero['abilities'].contains('super-strength')).run(conn)\n", "description": "Select all documents where the 'abilities' embedded document has an attribute called 'super-strength'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter(\n  r.row['powers'].filter(lambda el: el == 10).count() > 0\n).run(conn)\n", "description": "Select all documents where the field 'powers' containing an array has an element equal to 10.", "can_try": false}]}, "rb": {"body": "predicate", "dont_need_parenthesis": false, "name": "filter", "examples": [{"dataset": null, "code": "r.table('users').filter('active' => true, 'age' => 30).run(conn)", "description": "Get all active users aged 30.", "can_try": false}, {"dataset": null, "code": "r.table('users').filter{|user| user[:magazines] > 5}.run(conn)", "description": "Select all documents where the 'magazines' field is greater than 5.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter {|hero|\n  hero[:abilities].contains('super-strength')\n}.run(conn)\n", "description": "Select all documents where the 'abilities' embedded document has an attribute called 'super-strength'.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter { |hero| \n  hero[:powers].filter { |power_rank| power_rank.eq(10) }.count() > 0\n}.run(conn)\n", "description": "Select all documents where the field 'powers' containing an array has an element equal to 10.", "can_try": false}]}, "js": {"body": "predicate", "dont_need_parenthesis": false, "name": "filter", "examples": [{"dataset": "marvel", "code": "r.table('users').filter({active: true, age: 30}).run(conn, callback)", "description": "Get all active users aged 30.", "can_try": true}, {"dataset": "marvel", "code": "r.table('marvel').filter(r.row('magazines').gt(5)).run(conn, callback)", "description": "Select all documents where the 'magazines' field is greater than 5.", "can_try": true}, {"dataset": "marvel", "code": "r.table('marvel').filter(function(hero) {\n  return hero('abilities').contains('super-strength')\n}).run(conn, callback)\n", "description": "Select all documents where the 'abilities' embedded document has an attribute called 'super-strength'.", "can_try": true}, {"dataset": null, "code": "r.table('marvel').filter(\n  r.row('poweres').filter(\n    function(powers_el) { return powers_el.eq(10) }\n  ).count().gt(0)\n).run(conn, callback)\n", "description": "Select all documents where the field 'powers' containing an array has an element equal to 10.", "can_try": false}]}}, "order": 59}], "tag": "select", "name": "Selecting data", "description": "These commands allow searching for data in the database."}, {"order": 5, "commands": [{"description": "Returns the inner product of two sequences (e.g. a table, a filter result) filtered by the predicate. The query compares each row of the left sequence with each row of the right sequence to find all pairs of rows which satisfy the predicate. When the predicate is satisfied, each matched pair of rows of both sequences are combined into a result row.", "parent": "sequence", "returns": "sequence", "tag": "inner", "langs": {"py": {"body": "othersequence, predicate", "dont_need_parenthesis": false, "name": "inner_join", "examples": [{"dataset": null, "code": "r.table('marvel').inner_join(r.table('dc'), lambda marvelRow, dcRow: marvelRow['strength'] < dcRow['strength']).run(conn)", "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose.", "can_try": false}]}, "rb": {"body": "othersequence, predicate", "dont_need_parenthesis": false, "name": "inner_join", "examples": [{"dataset": null, "code": "r.table('marvel').inner_join(r.table('dc')) {|marvel_row, dc_row|\n marvel_row[:strength] < dc_row[:strength]\n}.run(conn)", "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose.", "can_try": false}]}, "js": {"body": "othersequence, predicate", "dont_need_parenthesis": false, "name": "innerJoin", "examples": [{"dataset": "marvel", "code": "r.table('marvel').innerJoin(r.table('dc'), function(marvelRow, dcRow) {\n  return marvelRow('strength').lt(dcRow('strength'))\n }).run(conn, callback)", "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose.", "can_try": true}]}}, "order": 22}, {"description": "Computes a left outer join by retaining each row in the left table even if no match was found in the right table.", "parent": "sequence", "returns": "sequence", "tag": "outer", "langs": {"py": {"body": "othersequence, predicate", "dont_need_parenthesis": false, "name": "outer_join", "examples": [{"dataset": null, "code": "r.table('marvel').outer_join(r.table('dc'),\n  lambda marvelRow, dcRow: marvelRow['strength'] < dcRow['strength']).run(conn)", "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose, but keep marvel heroes who would never lose a matchup in the sequence.", "can_try": false}]}, "rb": {"body": "othersequence, predicate", "dont_need_parenthesis": false, "name": "outer_join", "examples": [{"dataset": null, "code": "r.table('marvel').outer_join(r.table('dc')) {|marvel_row, dc_row|\n marvel_row[:strength] < dc_row[:strength]\n}.run(conn)", "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose, but keep marvel heroes who would never lose a matchup in the sequence.", "can_try": false}]}, "js": {"body": "othersequence, predicate", "dont_need_parenthesis": false, "name": "outerJoin", "examples": [{"dataset": "marvel", "code": "r.table('marvel').outerJoin(r.table('dc'), function(marvelRow, dcRow) {\n return marvelRow('strength').lt(dcRow('strength'))\n}).run(conn, callback)", "description": "Construct a sequence of documents containing all cross-universe matchups where a marvel hero would lose, but keep marvel heroes who would never lose a matchup in the sequence.", "can_try": true}]}}, "order": 23}, {"description": "An efficient join that looks up elements in the right table by primary key.", "parent": "sequence", "returns": "sequence", "tag": "eqJoin", "langs": {"py": {"body": "left_attr, other[, index='id']", "dont_need_parenthesis": false, "name": "eq_join", "examples": [{"dataset": null, "code": "r.table('marvel').eq_join('main_dc_collaborator', r.table('dc')).run(conn)", "description": "Let our heroes join forces to battle evil!", "can_try": false}, {"dataset": null, "code": "r.table('marvel').inner_join(r.table('dc'),\n  lambda left, right: left['main_dc_collaborator'] == right['hero_name']).run(conn)", "description": "The above query is equivalent to this inner join but runs in O(n log(m)) time rather than the O(n * m) time the inner join takes.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').eq_join('main_weapon_origin',\n    r.table('mythical_weapons'), index='origin').run(conn)\n", "description": "You can take advantage of a secondary index on the second table by giving an optional index parameter.", "can_try": false}]}, "rb": {"body": "left_attr, other[, :index => 'id']", "dont_need_parenthesis": false, "name": "eq_join", "examples": [{"dataset": null, "code": "r.table('marvel').eq_join(:main_dc_collaborator, r.table('dc')).run(conn)", "description": "Let our heroes join forces to battle evil!", "can_try": false}, {"dataset": null, "code": "r.table('marvel').inner_join(r.table('dc')) {|left, right|\n left[:main_dc_collaborator].eq(right[:hero_name])\n}.run(conn)", "description": "The above query is equivalent to this inner join but runs in O(n log(m)) time rather than the O(n * m) time the inner join takes.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').eq_join('main_weapon_origin',\n    r.table('mythical_weapons'), :index => 'origin').run(conn)\n", "description": "You can take advantage of a secondary index on the second table by giving an optional index parameter.", "can_try": false}]}, "js": {"body": "leftAttr, other[, {index:'id'}]", "dont_need_parenthesis": false, "name": "eqJoin", "examples": [{"dataset": "marvel", "code": "r.table('marvel').eqJoin('main_dc_collaborator', r.table('dc')).run(conn, callback)", "description": "Let our heroes join forces to battle evil!", "can_try": true}, {"dataset": "marvel", "code": "r.table('marvel').innerJoin(r.table('dc'), function(left, right) {\n  return left('main_dc_collaborator').eq(right('hero_name'));\n}).run(conn, callback)", "description": "The above query is equivalent to this inner join but runs in O(n log(m)) time rather than the O(n * m) time the inner join takes.", "can_try": true}, {"dataset": null, "code": "r.table('marvel').eqJoin('main_weapon_origin',\n    r.table('mythical_weapons'), {index:'origin'}).run(conn, callback)\n", "description": "You can take advantage of a secondary index on the second table by giving an optional index parameter.", "can_try": false}]}}, "order": 24}, {"description": "Used to 'zip' up the result of a join by merging the 'right' fields into 'left' fields of each member of the sequence.", "parent": "sequence", "returns": "sequence", "tag": "zip", "langs": {"py": {"body": "", "dont_need_parenthesis": false, "name": "zip", "examples": [{"dataset": null, "code": "r.table('marvel').eq_join('main_dc_collaborator', r.table('dc')).zip().run(conn)", "description": "'zips up' the sequence by merging the left and right fields produced by a join.", "can_try": false}]}, "rb": {"body": "", "dont_need_parenthesis": true, "name": "zip", "examples": [{"dataset": null, "code": "r.table('marvel').eq_join(:main_dc_collaborator, r.table('dc')).zip.run(conn)", "description": "'zips up' the sequence by merging the left and right fields produced by a join.", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": false, "name": "zip", "examples": [{"dataset": "marvel", "code": "r.table('marvel').eqJoin('main_dc_collaborator', r.table('dc'))\n .zip().run(conn, callback)", "description": "'zips up' the sequence by merging the left and right fields produced by a join.", "can_try": true}]}}, "order": 25}], "tag": "joins", "name": "Joins", "description": "These commands allow the combination of multiple sequences into a single sequence"}, {"order": 6, "commands": [{"description": "Transform each element of the sequence by applying the given mapping function.", "parent": "sequence", "returns": "sequence", "tag": "map", "langs": {"py": {"body": "mapping_function", "dont_need_parenthesis": false, "name": "map", "examples": [{"dataset": null, "code": "r.table('marvel').map(\n    lambda hero: hero['combatPower'] + hero['compassionPower'] * 2).run(conn)", "description": "Construct a sequence of hero power ratings.", "can_try": false}]}, "rb": {"body": "mapping_function", "dont_need_parenthesis": false, "name": "map", "examples": [{"dataset": null, "code": "r.table('marvel').map {|hero|\n hero[:combat_power] + hero[:compassion_power] * 2\n}.run(conn)", "description": "Construct a sequence of hero power ratings.", "can_try": false}]}, "js": {"body": "mappingFunction", "dont_need_parenthesis": false, "name": "map", "examples": [{"dataset": "marvel", "code": "r.table('marvel').map(function(hero) {\n return hero('combatPower').add(hero('compassionPower').mul(2))\n}).run(conn, callback)", "description": "Construct a sequence of hero power ratings.", "can_try": true}]}}, "order": 37}, {"description": "Flattens a sequence of arrays returned by the <code>mappingFunction</code> into a single sequence.", "parent": "sequence", "returns": "sequence", "tag": "concat_map", "langs": {"py": {"body": "mapping_function", "dont_need_parenthesis": false, "name": "concat_map", "examples": [{"dataset": null, "code": "r.table('marvel').concat_map(lambda hero: hero['defeatedMonsters']).run(conn)", "description": "Construct a sequence of all monsters defeated by Marvel heroes. Here the field 'defeatedMonsters' is a list that is concatenated to the sequence.", "can_try": false}]}, "rb": {"body": "mapping_function", "dont_need_parenthesis": false, "name": "concat_map", "examples": [{"dataset": null, "code": "r.table('marvel').concat_map {|hero|\n  hero[:defeated_monsters]\n}.run(conn)", "description": "Construct a sequence of all monsters defeated by Marvel heroes. Here the field 'defeatedMonsters' is a list that is concatenated to the sequence.", "can_try": false}]}, "js": {"body": "mappingFunction", "dont_need_parenthesis": false, "name": "concatMap", "examples": [{"dataset": "marvel", "code": "r.table('marvel').concatMap(function(hero) {\n  return hero('defeatedMonsters')\n}).run(conn, callback)", "description": "Construct a sequence of all monsters defeated by Marvel heroes. Here the field 'defeatedMonsters' is a list that is concatenated to the sequence.", "can_try": true}]}}, "order": 38}, {"description": "Sort the sequence by document values of the given key(s).<br /><br /> <code>order by</code> defaults to ascending ordering. To explicitly specify the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>.", "parent": "sequence", "returns": "sequence", "tag": "order_by", "langs": {"py": {"body": "key1, [key2...]", "dont_need_parenthesis": false, "name": "order_by", "examples": [{"dataset": null, "code": "r.table('marvel').order_by('enemies_vanquished', 'damsels_saved').run(conn)", "description": "Order our heroes by a series of performance metrics.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').order_by(\n    r.desc('enemies_vanquished'), r.asc('damsels_saved')).run(conn)", "description": "Let's lead with our best vanquishers by specify descending ordering.", "can_try": false}]}, "rb": {"body": "key1, [key2...]", "dont_need_parenthesis": false, "name": "order_by", "examples": [{"dataset": null, "code": "r.table('marvel').order_by(:enemies_vanquished, :damsels_saved).run(conn)", "description": "Order our heroes by a series of performance metrics.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').order_by(r.desc(:enemies_vanquished),\n                           r.asc(:damsels_saved)      ).run(conn)", "description": "Let's lead with our best vanquishers by specify descending ordering.", "can_try": false}]}, "js": {"body": "key1, [key2...]", "dont_need_parenthesis": false, "name": "orderBy", "examples": [{"dataset": "marvel", "code": "r.table('marvel').orderBy('enemiesVanquished', 'damselsSaved').run(conn, callback)", "description": "Order our heroes by a series of performance metrics.", "can_try": true}, {"dataset": "marvel", "code": "r.table('marvel').orderBy(r.desc('enemiesVanquished'), r.asc('damselsSaved'))\n .run(conn, callback)", "description": "Let's lead with our best vanquishers by specify descending ordering.", "can_try": true}]}}, "order": 39}, {"description": "Skip a number of elements from the head of the sequence.", "parent": "sequence", "returns": "sequence", "tag": "skip", "langs": {"py": {"body": "n", "dont_need_parenthesis": false, "name": "skip", "examples": [{"dataset": null, "code": "r.table('marvel').order_by('successMetric').skip(10).run(conn)", "description": "Here in conjunction with `order_by` we choose to ignore the most successful heroes.", "can_try": false}]}, "rb": {"body": "n", "dont_need_parenthesis": false, "name": "skip", "examples": [{"dataset": null, "code": "r.table('marvel').order_by(:success_metric).skip(10).run(conn)", "description": "Here in conjunction with `order_by` we choose to ignore the most successful heroes.", "can_try": false}]}, "js": {"body": "n", "dont_need_parenthesis": false, "name": "skip", "examples": [{"dataset": null, "code": "r.table('marvel').orderBy('successMetric').skip(10).run(conn, callback)", "description": "Here in conjunction with `order_by` we choose to ignore the most successful heroes.", "can_try": false}]}}, "order": 40}, {"description": "End the sequence after the given number of elements.", "parent": "sequence", "returns": "sequence", "tag": "limit", "langs": {"py": {"body": "n", "dont_need_parenthesis": false, "name": "limit", "examples": [{"dataset": null, "code": "r.table('marvel').order_by('belovedness').limit(10).run(conn)", "description": "Only so many can fit in our Pantheon of heroes.", "can_try": false}]}, "rb": {"body": "n", "dont_need_parenthesis": false, "name": "limit", "examples": [{"dataset": null, "code": "r.table('marvel').order_by(:belovedness).limit(10).run(conn)", "description": "Only so many can fit in our Pantheon of heroes.", "can_try": false}]}, "js": {"body": "n", "dont_need_parenthesis": false, "name": "limit", "examples": [{"dataset": "marvel", "code": "r.table('marvel').orderBy('belovedness').limit(10).run(conn, callback)", "description": "Only so many can fit in our Pantheon of heroes.", "can_try": true}]}}, "order": 41}, {"description": "Trim the sequence to within the bounds provided.", "parent": "sequence", "returns": "sequence", "tag": "slice", "langs": {"py": {"body": "startIndex[, endIndex]", "name": "[]", "dont_need_parenthesis": false, "is_selector": true, "name2": "]", "examples": [{"dataset": null, "code": "r.table('marvel').order_by('strength')[5:10].run(conn)", "description": "For this fight, we need heroes with a good mix of strength and agility.", "can_try": false}], "name1": "["}, "rb": {"body": "startIndex[, endIndex]", "name": "[]", "dont_need_parenthesis": false, "is_selector": true, "name2": "]", "examples": [{"dataset": null, "code": "r.table('marvel').order_by(:strength)[5..10].run(conn)", "description": "For this fight, we need heroes with a good mix of strength and agility.", "can_try": false}], "name1": "["}, "js": {"body": "startIndex[, endIndex]", "dont_need_parenthesis": false, "name": "slice", "examples": [{"dataset": null, "code": "r.table('marvel').orderBy('strength').slice(5, 10).run(conn, callback)", "description": "For this fight, we need heroes with a good mix of strength and agility.", "can_try": false}]}}, "order": 42}, {"description": "Get the nth element of a sequence.", "parent": "sequence", "returns": "json", "tag": "nth", "langs": {"py": {"body": "index", "name": "[]", "dont_need_parenthesis": false, "is_selector": true, "name2": "]", "examples": [{"dataset": null, "code": "r.expr([1,2,3])[1].run(conn)", "description": "Select the second element in the array.", "can_try": false}], "name1": "["}, "rb": {"body": "index", "name": "[]", "dont_need_parenthesis": false, "is_selector": true, "name2": "]", "examples": [{"dataset": null, "code": "r([1,2,3])[1].run(conn)", "description": "Select the second element in the array.", "can_try": false}], "name1": "["}, "js": {"body": "index", "dont_need_parenthesis": false, "name": "nth", "examples": [{"dataset": "marvel", "code": "r.expr([1,2,3]).nth(1).run(conn, callback)", "description": "Select the second element in the array.", "can_try": true}]}}, "order": 43}, {"description": "Concatenate two sequences.", "parent": "sequence", "returns": "sequence", "tag": "union", "langs": {"py": {"body": "other", "dont_need_parenthesis": false, "name": "union", "examples": [{"dataset": null, "code": "r.table('marvel').union(r.table('dc')).run(conn)", "description": "Construct a stream of all heroes.", "can_try": false}]}, "rb": {"body": "other", "dont_need_parenthesis": false, "name": "union", "examples": [{"dataset": null, "code": "r.table('marvel').union(r.table('dc')).run(conn)", "description": "Construct a stream of all heroes.", "can_try": false}]}, "js": {"body": "other", "dont_need_parenthesis": false, "name": "union", "examples": [{"dataset": "marvel", "code": "r.table('marvel').union(r.table('dc')).run(conn, callback)", "description": "Construct a stream of all heroes.", "can_try": true}]}}, "order": 44}], "tag": "transformations", "name": "Transformations", "description": "These commands are used to transform data in a sequence."}, {"order": 7, "commands": [{"description": "Produce a single value from a sequence through repeated application\nof a reduction function.<br /><br />\nThe <code>reduce</code> function gets invoked repeatedly not only \nfor the input values but also for results of previous reduce invocations. \nThe type and format of the object that is passed in to reduce must be \nthe same with the one returned from reduce.\n", "parent": "sequence", "returns": "json", "tag": "reduce", "langs": {"py": {"body": "reduction_function[, base]", "dont_need_parenthesis": false, "name": "reduce", "examples": [{"dataset": null, "code": "r.table('marvel').map(r.row['monsters_killed']).reduce(\n    lambda acc, val: acc + val, 0).run(conn)", "description": "How many enemies have our heroes defeated?", "can_try": false}]}, "rb": {"body": "[base,] reduction_function", "dont_need_parenthesis": false, "name": "reduce", "examples": [{"dataset": null, "code": "r.table('marvel').map {|hero| hero['monstersKilled']}.reduce(0) {\n    |acc, val| acc + val }.run(conn)", "description": "How many enemies have our heroes defeated?", "can_try": false}]}, "js": {"body": "reductionFunction[, base]", "dont_need_parenthesis": false, "name": "reduce", "examples": [{"dataset": "marvel", "code": "r.table('marvel').map(r.row('monstersKilled')).reduce(function(acc, val) {\n    return acc.add(val)\n}, 0).run(conn, callback)", "description": "How many enemies have our heroes defeated?", "can_try": true}]}}, "order": 14}, {"description": "Count the number of elements in the sequence.", "parent": "sequence", "returns": "number", "tag": "count", "langs": {"py": {"body": "", "dont_need_parenthesis": false, "name": "count", "examples": [{"dataset": null, "code": "(r.table('marvel').count() + r.table('dc').count()).run(conn)", "description": "Just how many super heroes are there?", "can_try": false}]}, "rb": {"body": "", "dont_need_parenthesis": false, "name": "count", "examples": [{"dataset": null, "code": "(r.table('marvel').count + r.table('dc').count).run(conn)", "description": "Just how many super heroes are there?", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": false, "name": "count", "examples": [{"dataset": "marvel", "code": "r.table('marvel').count().add(r.table('dc').count()).run(conn, callback)", "description": "Just how many super heroes are there?", "can_try": true}]}}, "order": 15}, {"description": "Remove duplicate elements from the sequence.", "parent": "sequence", "returns": "sequence", "tag": "distinct", "langs": {"py": {"body": "", "dont_need_parenthesis": false, "name": "distinct", "examples": [{"dataset": null, "code": "r.table('marvel').concat_map(lambda hero: hero['villainList']).distinct().run(conn)", "description": "Which unique villains have been vanquished by marvel heroes?", "can_try": false}]}, "rb": {"body": "", "dont_need_parenthesis": true, "name": "distinct", "examples": [{"dataset": null, "code": "r.table('marvel').concat_map{|hero| hero[:villain_list]}.distinct.run(conn)", "description": "Which unique villains have been vanquished by marvel heroes?", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": false, "name": "distinct", "examples": [{"dataset": "marvel", "code": "r.table('marvel').concatMap(function(hero) {return hero('villainList')}).distinct()\n .run(conn, callback)", "description": "Which unique villains have been vanquished by marvel heroes?", "can_try": true}]}}, "order": 16}, {"description": "Partition the sequence into groups based on the <code>grouping</code> function. The elements of each group are then mapped using the <code>mapping</code> function and reduced using the <code>reduction</code> function.<br /><br /><code>grouped_map_reduce</code> is a generalized form of <code>group by</code>.", "parent": "sequence", "returns": "json", "tag": "groupedmapreduce", "langs": {"py": {"body": "grouping, mapping, reduction[, base]", "dont_need_parenthesis": false, "name": "grouped_map_reduce", "examples": [{"dataset": null, "code": "r.table('marvel').grouped_map_reduce(\n  lambda hero: hero['weightClass'],  # grouping\n  lambda hero: hero.pluck('name', 'strength'),  # mapping\n  lambda acc, hero: r.branch(acc['strength'] < hero['strength'], hero, acc),\n  {'name':'none', 'strength':0}  # base\n).run(conn)", "description": "It's only fair that heroes be compared against their weight class.", "can_try": false}]}, "rb": {"body": "grouping, mapping, reduction[, base]", "dont_need_parenthesis": false, "name": "grouped_map_reduce", "examples": [{"dataset": null, "code": "r.table('marvel').grouped_map_reduce(\n  lambda {|hero| hero[:weight_class]},  # grouping\n  lambda {|hero| hero.pluck(:name, :strength)},  #  mapping\n  {:name => 'none', :strength => 0},  # reduction base\n  lambda {|acc, hero| r.branch(acc[:strength] < hero[:strength], hero, acc)}\n).run(conn)", "description": "It's only fair that heroes be compared against their weight class.", "can_try": false}]}, "js": {"body": "grouping, mapping, reduction[, base]", "dont_need_parenthesis": false, "name": "groupedMapReduce", "examples": [{"dataset": "marvel", "code": "r.table('marvel').groupedMapReduce(\n  function(hero) { return hero('weightClass')},  // grouping\n  function(hero) { return hero.pluck('name', 'strength')},  // mapping\n  function(acc, hero) {  // reduction\n    return r.branch(acc('strength').lt(hero('strength')), hero, acc)\n  },\n  {name:'none', strength:0} // reduction base\n).run(conn, callback)", "description": "It's only fair that heroes be compared against their weight class.", "can_try": true}]}}, "order": 17}, {"description": "Groups elements by the values of the given attributes and then applies the given reduction. Though similar to <code>grouped_map_reduce</code>, groupby takes a standardized object for specifying the reduction. Can be used with a number of predefined common reductions.", "parent": "sequence", "returns": "json", "tag": "group_by", "langs": {"py": {"body": "attr1[, attr2...], reduction_object", "dont_need_parenthesis": false, "name": "group_by", "examples": [{"dataset": null, "code": "r.table('marvel').group_by('weightClass', r.avg('strength')).run(conn)", "description": "Using a predefined reduction we can easily find the average strength of members of each weight class.", "can_try": false}]}, "rb": {"body": "attr1[, attr2...], reduction_object", "dont_need_parenthesis": false, "name": "group_by", "examples": [{"dataset": null, "code": "r.table('marvel').group_by(:weight_class, r.avg(:strength)).run(conn)", "description": "Using a predefined reduction we can easily find the average strength of members of each weight class.", "can_try": false}]}, "js": {"body": "attr1[, attr2...], reductionObject", "dont_need_parenthesis": false, "name": "groupBy", "examples": [{"dataset": "marvel", "code": "r.table('marvel').groupBy('weightClass', r.avg('strength')).run(conn, callback)", "description": "Using a predefined reduction we can easily find the average strength of members of each weight class.", "can_try": true}]}}, "order": 18}], "tag": "aggregation", "name": "Aggregation", "description": "These commands are used to compute smaller values from large sequences."}, {"order": 8, "commands": [{"description": "Count the total size of the group.", "parent": "r", "returns": null, "tag": "count", "langs": {"py": {"body": "", "dont_need_parenthesis": true, "name": "count", "examples": [{"dataset": null, "code": "r.table('marvel').group_by('strength', r.count).run(conn)", "description": "Just how many heroes do we have at each strength level?", "can_try": false}]}, "rb": {"body": "", "dont_need_parenthesis": true, "name": "count", "examples": [{"dataset": null, "code": "r.table('marvel').group_by(:strength, r.count).run(conn)", "description": "Just how many heroes do we have at each strength level?", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": true, "name": "count", "examples": [{"dataset": "marvel", "code": "r.table('marvel').groupBy('strength', r.count).run(conn, callback)", "description": "Just how many heroes do we have at each strength level?", "can_try": true}]}}, "order": 19}, {"description": "Compute the sum of the given field in the group.", "parent": "r", "returns": null, "tag": "sum", "langs": {"py": {"body": "attr", "dont_need_parenthesis": false, "name": "sum", "examples": [{"dataset": null, "code": "r.table('marvel').group_by('strength', r.sum('enemiesVanquished')).run(conn)", "description": "How many enemies have been vanquished by heroes at each strength level?", "can_try": false}]}, "rb": {"body": "attr", "dont_need_parenthesis": false, "name": "sum", "examples": [{"dataset": null, "code": "r.table('marvel').group_by(:strength, r.sum(:enemies_vanquished)).run(conn)", "description": "How many enemies have been vanquished by heroes at each strength level?", "can_try": false}]}, "js": {"body": "attr", "dont_need_parenthesis": false, "name": "sum", "examples": [{"dataset": "marvel", "code": "r.table('marvel').groupBy('strength', r.sum('enemiesVanquished')).run(conn, callback)", "description": "How many enemies have been vanquished by heroes at each strength level?", "can_try": true}]}}, "order": 20}, {"description": "Compute the average value of the given attribute for the group.", "parent": "r", "returns": null, "tag": "avg", "langs": {"py": {"body": "attr", "dont_need_parenthesis": false, "name": "avg", "examples": [{"dataset": null, "code": "r.table('marvel').group_by('strength', r.avg('agility')).run(conn)", "description": "What's the average agility of heroes at each strength level?", "can_try": false}]}, "rb": {"body": "attr", "dont_need_parenthesis": false, "name": "avg", "examples": [{"dataset": null, "code": "r.table('marvel').group_by(:strength, r.avg(:agility)).run(conn)", "description": "What's the average agility of heroes at each strength level?", "can_try": false}]}, "js": {"body": "attr", "dont_need_parenthesis": false, "name": "avg", "examples": [{"dataset": "marvel", "code": "r.table('marvel').groupBy('strength', r.avg('agility')).run(conn, callback)", "description": "What's the average agility of heroes at each strength level?", "can_try": true}]}}, "order": 21}], "tag": "aggregators", "name": "Aggregators", "description": "These standard aggregator objects are to be used in conjunction with group_by."}, {"order": 9, "commands": [{"description": "Returns the currently visited document.", "parent": "r", "returns": "json", "tag": "row", "langs": {"py": {"body": "", "dont_need_parenthesis": true, "name": "row", "examples": [{"dataset": null, "code": "r.table('users').filter(r.row['age'] > 5).run(conn)", "description": "Get all users whose age is greater than 5.", "can_try": false}, {"dataset": null, "code": "r.table('users').filter(r.row['embedded_doc']['child'] > 5).run(conn)", "description": "Accessing the attribute 'child' of an embedded document.", "can_try": false}, {"dataset": null, "code": "r.expr([1, 2, 3]).map(r.row + 1).run(conn)", "description": "Add 1 to every element of an array.", "can_try": false}, {"dataset": null, "code": "r.table('users').filter(\n    lambda doc: doc['name'] == r.table('prizes').get('winner')).run(conn)", "description": "For nested queries functions should be used instead of r.row.", "can_try": false}]}, "rb": {"examples": [{"dataset": null, "code": "", "description": "Get all users whose age is greater than 5.", "can_try": false}, {"dataset": null, "code": "", "description": "Accessing the attribute 'child' of an embedded document.", "can_try": false}, {"dataset": null, "code": "", "description": "Add 1 to every element of an array.", "can_try": false}, {"dataset": null, "code": "", "description": "For nested queries functions should be used instead of r.row.", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": true, "name": "row", "examples": [{"dataset": "marvel", "code": "r.table('users').filter(r.row('age').gt(5)).run(conn, callback)", "description": "Get all users whose age is greater than 5.", "can_try": true}, {"dataset": "marvel", "code": "r.table('users').filter(r.row('embedded_doc')('child') > 5).run(conn, callback)", "description": "Accessing the attribute 'child' of an embedded document.", "can_try": true}, {"dataset": "marvel", "code": "r.expr([1, 2, 3]).map(r.row.add(1)).run(conn, callback)", "description": "Add 1 to every element of an array.", "can_try": true}, {"dataset": null, "code": "r.table('users').filter(function(doc) {\n    return doc('name').eq(r.table('prizes').get('winner'))\n}).run(conn, callback)", "description": "For nested queries functions should be used instead of r.row.", "can_try": false}]}}, "order": 60}, {"description": "Plucks out one or more attributes from either an object or a sequence of objects (projection).", "parent": "sequence", "returns": "sequence", "tag": "pluck", "langs": {"py": {"body": "attr1[, attr2...]", "dont_need_parenthesis": false, "name": "pluck", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn)", "description": "We just need information about IronMan's reactor and not the rest of the document.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').pluck('beauty', 'muscleTone', 'charm').run(conn)", "description": "For the hero beauty contest we only care about certain qualities.", "can_try": false}]}, "rb": {"body": "attr1[, attr2...]", "dont_need_parenthesis": false, "name": "pluck", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower').run(conn)", "description": "We just need information about IronMan's reactor and not the rest of the document.", "can_try": false}, {"dataset": null, "code": "r.table('marvel').pluck('beauty', 'muscleTone', 'charm').run(conn)", "description": "For the hero beauty contest we only care about certain qualities.", "can_try": false}]}, "js": {"body": "attr1[, attr2...]", "dont_need_parenthesis": false, "name": "pluck", "examples": [{"dataset": "marvel", "code": "r.table('marvel').get('IronMan').pluck('reactorState', 'reactorPower')\n .run(conn, callback)\n", "description": "We just need information about IronMan's reactor and not the rest of the document.", "can_try": true}, {"dataset": "marvel", "code": "r.table('marvel').pluck('beauty', 'muscleTone', 'charm').run(conn, callback)", "description": "For the hero beauty contest we only care about certain qualities.", "can_try": true}]}}, "order": 61}, {"description": "The opposite of pluck; takes an object or a sequence of objects, and removes all attributes except for the ones specified.", "parent": "sequence", "returns": "sequence", "tag": "without", "langs": {"py": {"body": "attr1[, attr2...]", "dont_need_parenthesis": false, "name": "without", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn)", "description": "Since we don't need it for this computation we'll save bandwidth and leave out the list of IronMan's romantic conquests.", "can_try": false}, {"dataset": null, "code": "r.table('enemies').without('weapons').run(conn)", "description": "Without their prized weapons, our enemies will quickly be vanquished.", "can_try": false}]}, "rb": {"body": "attr1[, attr2...]", "dont_need_parenthesis": false, "name": "without", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn)", "description": "Since we don't need it for this computation we'll save bandwidth and leave out the list of IronMan's romantic conquests.", "can_try": false}, {"dataset": null, "code": "r.table('enemies').without('weapons').run(conn)", "description": "Without their prized weapons, our enemies will quickly be vanquished.", "can_try": false}]}, "js": {"body": "attr1[, attr2...]", "dont_need_parenthesis": false, "name": "without", "examples": [{"dataset": "marvel", "code": "r.table('marvel').get('IronMan').without('personalVictoriesList').run(conn, callback)", "description": "Since we don't need it for this computation we'll save bandwidth and leave out the list of IronMan's romantic conquests.", "can_try": true}, {"dataset": "marvel", "code": "r.table('enemies').without('weapons').run(conn, callback)", "description": "Without their prized weapons, our enemies will quickly be vanquished.", "can_try": true}]}}, "order": 62}, {"description": "Merge two objects together to construct a new object with properties from both. Gives preference to attributes from other when there is a conflict.", "parent": "json", "returns": "json", "tag": "merge", "langs": {"py": {"body": "json", "dont_need_parenthesis": false, "name": "merge", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').merge(\n  r.table('loadouts').get('alienInvasionKit')).run(conn)", "description": "Equip IronMan for battle.", "can_try": false}]}, "rb": {"body": "json", "dont_need_parenthesis": false, "name": "merge", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').merge(\n  r.table('loadouts').get('alienInvasionKit')).run(conn)", "description": "Equip IronMan for battle.", "can_try": false}]}, "js": {"body": "json", "dont_need_parenthesis": false, "name": "merge", "examples": [{"dataset": "marvel", "code": "r.table('marvel').get('IronMan').merge(\n  r.table('loadouts').get('alienInvasionKit')).run(conn, callback)", "description": "Equip IronMan for battle.", "can_try": true}]}}, "order": 63}, {"description": "Append a value to an array.", "parent": "json", "returns": "json", "tag": "append", "langs": {"py": {"body": "value", "dont_need_parenthesis": false, "name": "append", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')['equipment'].append('newBoots').run(conn)", "description": "Retrieve Iron Man's equipment list with the addition of some new boots.", "can_try": false}]}, "rb": {"body": "value", "dont_need_parenthesis": false, "name": "append", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')[:equipment].append('new_boots').run(conn)", "description": "Retrieve Iron Man's equipment list with the addition of some new boots.", "can_try": false}]}, "js": {"body": "value", "dont_need_parenthesis": false, "name": "append", "examples": [{"dataset": "marvel", "code": "r.table('marvel').get('IronMan')('equipment').append('newBoots').run(conn, callback)", "description": "Retrieve Iron Man's equipment list with the addition of some new boots.", "can_try": true}]}}, "order": 64}, {"description": "Get a single attribute from an object.", "parent": "json", "returns": "json", "tag": "getattr", "langs": {"py": {"body": "attr", "name": "[]", "dont_need_parenthesis": false, "is_selector": true, "name2": "]", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')['firstAppearance'].run(conn)", "description": "What was Iron Man's first appearance in a comic?", "can_try": false}], "name1": "["}, "rb": {"body": "attr", "name": "[]", "dont_need_parenthesis": false, "is_selector": true, "name2": "]", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan')[:first_appearance].run(conn)", "description": "What was Iron Man's first appearance in a comic?", "can_try": false}], "name1": "["}, "js": {"body": "attr", "name": "()", "dont_need_parenthesis": false, "is_selector": true, "name2": ")", "examples": [{"dataset": "marvel", "code": "r.table('marvel').get('IronMan')('firstAppearance').run(conn, callback)", "description": "What was Iron Man's first appearance in a comic?", "can_try": true}], "name1": "("}}, "order": 65}, {"description": "Test if an object has the given attribute. <br /><br /> <code>contains</code> can only be called on objects and not on <code>string</code> or <code>array</code> attributes.", "parent": "json", "returns": "bool", "tag": "contains", "langs": {"py": {"body": "attr", "dont_need_parenthesis": false, "name": "contains", "examples": [{"dataset": null, "code": "r.table('marvel').filter(lambda hero: hero.contains('spouse')).run(conn)", "description": "Which heroes are married?", "can_try": false}]}, "rb": {"body": "attr", "dont_need_parenthesis": false, "name": "contains", "examples": [{"dataset": null, "code": "r.table('marvel').filter{|hero| hero.contains(:spouse)}.run(conn)", "description": "Which heroes are married?", "can_try": false}]}, "js": {"body": "attr", "dont_need_parenthesis": false, "name": "contains", "examples": [{"dataset": "marvel", "code": "r.table('marvel').filter(function(hero) {return hero.contains('spouse')})\n .run(conn, callback)\n", "description": "Which heroes are married?", "can_try": true}]}}, "order": 66}], "tag": "jsonobject", "name": "Document Manipulation", "description": "These commands manipulate JSON objects and documents"}, {"order": 10, "commands": [{"description": "Sum two numbers or concatenate two strings.", "parent": "number | string", "returns": "number | string", "tag": "add", "langs": {"py": {"body": "other", "is_operator": true, "dont_need_parenthesis": false, "name": "+", "examples": [{"dataset": null, "code": "(r.expr(2) + 2).run(conn)", "description": "It's as easy as 2 + 2 = 4.", "can_try": false}, {"dataset": null, "code": "(r.expr(\"foo\") + \"bar\").run(conn)", "description": "Strings can be concatenated too.", "can_try": false}]}, "rb": {"body": "other", "is_operator": true, "dont_need_parenthesis": false, "name": "+", "examples": [{"dataset": null, "code": "(r(2) + 2).run(conn)", "description": "It's as easy as 2 + 2 = 4.", "can_try": false}, {"dataset": null, "code": "(r(\"foo\") + \"bar\").run(conn)", "description": "Strings can be concatenated too.", "can_try": false}]}, "js": {"body": "other", "is_operator": false, "dont_need_parenthesis": false, "name": "add", "examples": [{"dataset": "marvel", "code": "r.expr(2).add(2).run(conn, callback)", "description": "It's as easy as 2 + 2 = 4.", "can_try": true}, {"dataset": "marvel", "code": "r.expr(\"foo\").add(\"bar\").run(conn, callback)", "description": "Strings can be concatenated too.", "can_try": true}]}}, "order": 0}, {"description": "Subtract two numbers.", "parent": "number", "returns": "number", "tag": "sub", "langs": {"py": {"body": "number", "is_operator": true, "dont_need_parenthesis": false, "name": "-", "examples": [{"dataset": null, "code": "(r.expr(2) - 2).run(conn)", "description": "It's as easy as 2 - 2 = 0.", "can_try": false}]}, "rb": {"body": "number", "is_operator": true, "dont_need_parenthesis": false, "name": "-", "examples": [{"dataset": null, "code": "(r(2) - 2).run(conn)", "description": "It's as easy as 2 - 2 = 0.", "can_try": false}]}, "js": {"body": "number", "is_operator": false, "dont_need_parenthesis": false, "name": "sub", "examples": [{"dataset": "marvel", "code": "r.expr(2).sub(2).run(conn, callback)", "description": "It's as easy as 2 - 2 = 0.", "can_try": true}]}}, "order": 1}, {"description": "Multiply two numbers.", "parent": "number", "returns": "number", "tag": "mul", "langs": {"py": {"body": "number", "is_operator": true, "dont_need_parenthesis": false, "name": "*", "examples": [{"dataset": null, "code": "(r.expr(2) * 2).run(conn)", "description": "It's as easy as 2 * 2 = 4.", "can_try": false}]}, "rb": {"body": "number", "is_operator": true, "dont_need_parenthesis": false, "name": "*", "examples": [{"dataset": null, "code": "(r(2) * 2).run(conn)", "description": "It's as easy as 2 * 2 = 4.", "can_try": false}]}, "js": {"body": "number", "is_operator": false, "dont_need_parenthesis": false, "name": "mul", "examples": [{"dataset": "marvel", "code": "r.expr(2).mul(2).run(conn, callback)", "description": "It's as easy as 2 * 2 = 4.", "can_try": true}]}}, "order": 2}, {"description": "Divide two numbers.", "parent": "number", "returns": "number", "tag": "div", "langs": {"py": {"body": "number", "is_operator": true, "dont_need_parenthesis": false, "name": "/", "examples": [{"dataset": null, "code": "(r.expr(2) / 2).run(conn)", "description": "It's as easy as 2 / 2 = 1.", "can_try": false}]}, "rb": {"body": "number", "is_operator": true, "dont_need_parenthesis": false, "name": "/", "examples": [{"dataset": null, "code": "(r(2) / 2).run(conn)", "description": "It's as easy as 2 / 2 = 1.", "can_try": false}]}, "js": {"body": "number", "is_operator": false, "dont_need_parenthesis": false, "name": "div", "examples": [{"dataset": "marvel", "code": "r.expr(2).div(2).run(conn, callback)", "description": "It's as easy as 2 / 2 = 1.", "can_try": true}]}}, "order": 3}, {"description": "Find the remainder when dividing two numbers.", "parent": "number", "returns": "number", "tag": "mod", "langs": {"py": {"body": "number", "is_operator": true, "dont_need_parenthesis": false, "name": "%", "examples": [{"dataset": null, "code": "(r.expr(2) % 2).run(conn)", "description": "It's as easy as 2 % 2 = 0.", "can_try": false}]}, "rb": {"body": "number", "is_operator": true, "dont_need_parenthesis": false, "name": "%", "examples": [{"dataset": null, "code": "(r(2) % 2).run(conn)", "description": "It's as easy as 2 % 2 = 0.", "can_try": false}]}, "js": {"body": "number", "is_operator": false, "dont_need_parenthesis": false, "name": "mod", "examples": [{"dataset": "marvel", "code": "r.expr(2).mod(2).run(conn, callback)", "description": "It's as easy as 2 % 2 = 0.", "can_try": true}]}}, "order": 4}, {"description": "Compute the logical and of two values.", "parent": "bool", "returns": "bool", "tag": "and", "langs": {"py": {"body": "bool", "is_operator": true, "dont_need_parenthesis": false, "name": "&", "examples": [{"dataset": null, "code": "(r.expr(True) & False).run(conn)", "description": "True and false anded is false?", "can_try": false}]}, "rb": {"body": "bool", "is_operator": true, "dont_need_parenthesis": false, "name": "&", "examples": [{"dataset": null, "code": "(r(true) & false).run(conn)", "description": "True and false anded is false?", "can_try": false}]}, "js": {"body": "bool", "is_operator": false, "dont_need_parenthesis": false, "name": "and", "examples": [{"dataset": "marvel", "code": "r.expr(true).and(false).run(conn, callback)", "description": "True and false anded is false?", "can_try": true}]}}, "order": 5}, {"description": "Compute the logical or of two values.", "parent": "bool", "returns": "bool", "tag": "or", "langs": {"py": {"body": "bool", "is_operator": true, "dont_need_parenthesis": false, "name": "|", "examples": [{"dataset": null, "code": "(r.expr(True) | False).run(conn)", "description": "True or false ored is true?", "can_try": false}]}, "rb": {"body": "bool", "is_operator": true, "dont_need_parenthesis": false, "name": "|", "examples": [{"dataset": null, "code": "(r(true) | false).run(conn)", "description": "True or false ored is true?", "can_try": false}]}, "js": {"body": "bool", "is_operator": false, "dont_need_parenthesis": false, "name": "or", "examples": [{"dataset": "marvel", "code": "r.expr(true).or(false).run(conn, callback)", "description": "True or false ored is true?", "can_try": true}]}}, "order": 6}, {"description": "Test if two values are equal.", "parent": "json", "returns": "bool", "tag": "eq", "langs": {"py": {"body": "other", "is_operator": true, "dont_need_parenthesis": false, "name": "==", "examples": [{"dataset": null, "code": "(r.expr(2) == 2).run(conn)", "description": "Does 2 equal 2?", "can_try": false}]}, "rb": {"body": "other", "is_operator": true, "dont_need_parenthesis": false, "name": "eq", "examples": [{"dataset": null, "code": "(r(2).eq 2).run(conn)", "description": "Does 2 equal 2?", "can_try": false}]}, "js": {"body": "other", "is_operator": false, "dont_need_parenthesis": false, "name": "eq", "examples": [{"dataset": "marvel", "code": "r.expr(2).eq(2).run(conn, callback)", "description": "Does 2 equal 2?", "can_try": true}]}}, "order": 7}, {"description": "Test if two values are not equal.", "parent": "json", "returns": "bool", "tag": "ne", "langs": {"py": {"body": "other", "is_operator": true, "dont_need_parenthesis": false, "name": "!=", "examples": [{"dataset": null, "code": "(r.expr(2) != 2).run(conn)", "description": "Does 2 not equal 2?", "can_try": false}]}, "rb": {"body": "other", "is_operator": true, "dont_need_parenthesis": false, "name": "ne", "examples": [{"dataset": null, "code": "(r(2).ne 2).run(conn)", "description": "Does 2 not equal 2?", "can_try": false}]}, "js": {"body": "other", "is_operator": false, "dont_need_parenthesis": false, "name": "ne", "examples": [{"dataset": "marvel", "code": "r.expr(2).ne(2).run(conn, callback)", "description": "Does 2 not equal 2?", "can_try": true}]}}, "order": 8}, {"description": "Test if the first value is greater than other.", "parent": "json", "returns": "bool", "tag": "gt", "langs": {"py": {"body": "other", "is_operator": true, "dont_need_parenthesis": false, "name": ">", "examples": [{"dataset": null, "code": "(r.expr(2) > 2).run(conn)", "description": "Is 2 greater than 2?", "can_try": false}]}, "rb": {"body": "other", "is_operator": true, "dont_need_parenthesis": false, "name": ">", "examples": [{"dataset": null, "code": "(r(2) > 2).run(conn)", "description": "Is 2 greater than 2?", "can_try": false}]}, "js": {"body": "other", "is_operator": false, "dont_need_parenthesis": false, "name": "gt", "examples": [{"dataset": "marvel", "code": "r.expr(2).gt(2).run(conn, callback)", "description": "Is 2 greater than 2?", "can_try": true}]}}, "order": 9}, {"description": "Test if the first value is greater than or equal to other.", "parent": "json", "returns": "bool", "tag": "ge", "langs": {"py": {"body": "other", "is_operator": true, "dont_need_parenthesis": false, "name": ">=", "examples": [{"dataset": null, "code": "(r.expr(2) >= 2).run(conn)", "description": "Is 2 greater than or equal to 2?", "can_try": false}]}, "rb": {"body": "other", "is_operator": true, "dont_need_parenthesis": false, "name": ">=", "examples": [{"dataset": null, "code": "(r(2) >= 2).run(conn)", "description": "Is 2 greater than or equal to 2?", "can_try": false}]}, "js": {"body": "other", "is_operator": false, "dont_need_parenthesis": false, "name": "ge", "examples": [{"dataset": "marvel", "code": "r.expr(2).ge(2).run(conn, callback)", "description": "Is 2 greater than or equal to 2?", "can_try": true}]}}, "order": 10}, {"description": "Test if the first value is less than other.", "parent": "json", "returns": "bool", "tag": "lt", "langs": {"py": {"body": "other", "is_operator": true, "dont_need_parenthesis": false, "name": "<", "examples": [{"dataset": null, "code": "(r.expr(2) < 2).run(conn)", "description": "Is 2 less than 2?", "can_try": false}]}, "rb": {"body": "other", "is_operator": true, "dont_need_parenthesis": false, "name": "<", "examples": [{"dataset": null, "code": "(r(2) < 2).run(conn)", "description": "Is 2 less than 2?", "can_try": false}]}, "js": {"body": "other", "is_operator": false, "dont_need_parenthesis": false, "name": "lt", "examples": [{"dataset": "marvel", "code": "r.expr(2).lt(2).run(conn, callback)", "description": "Is 2 less than 2?", "can_try": true}]}}, "order": 11}, {"description": "Test if the first value is less than or equal to other.", "parent": "json", "returns": "bool", "tag": "le", "langs": {"py": {"body": "other", "is_operator": true, "dont_need_parenthesis": false, "name": "<=", "examples": [{"dataset": null, "code": "(r.expr(2) <= 2).run(conn)", "description": "Is 2 less than or equal to 2?", "can_try": false}]}, "rb": {"body": "other", "is_operator": true, "dont_need_parenthesis": false, "name": "<=", "examples": [{"dataset": null, "code": "(r(2) <= 2).run(conn)", "description": "Is 2 less than or equal to 2?", "can_try": false}]}, "js": {"body": "other", "is_operator": false, "dont_need_parenthesis": false, "name": "le", "examples": [{"dataset": "marvel", "code": "r.expr(2).le(2).run(conn, callback)", "description": "Is 2 less than or equal to 2?", "can_try": true}]}}, "order": 12}, {"description": "Compute the logical inverse (not).", "parent": "bool", "returns": "bool", "tag": "not", "langs": {"py": {"body": "", "is_operator": true, "dont_need_parenthesis": false, "name": "~", "examples": [{"dataset": null, "code": "(~r.expr(True)).run(conn)", "description": "Not true is false.", "can_try": false}]}, "rb": {"body": "", "is_operator": false, "dont_need_parenthesis": true, "name": "not", "examples": [{"dataset": null, "code": "r(true).not.run(conn)", "description": "Not true is false.", "can_try": false}]}, "js": {"body": "", "is_operator": false, "dont_need_parenthesis": false, "name": "not", "examples": [{"dataset": "marvel", "code": "r.expr(true).not().run(conn, callback)", "description": "Not true is false.", "can_try": true}]}}, "order": 13}], "tag": "operators", "name": "Math and logic", "description": "These commands provide basic mathematical and logical operators."}, {"order": 11, "commands": [{"description": "Evaluate the <code>inExpr</code> in the context of one or more value\nbindings.<br /><br />\nThe type of the result is the type of the value returned from <code>inExpr</code>.\n", "parent": "r", "returns": "query", "tag": "do", "langs": {"py": {"body": "arg, [args*, ]inExpr", "dont_need_parenthesis": false, "name": "do", "examples": [{"dataset": null, "code": "r.do(r.table('marvel').get('IronMan'),\n     lambda ironman: ironman['name']).run(conn)", "description": "The object(s) passed to do() can be bound to name(s). The last argument is the expression to evaluate in the context of the bindings.", "can_try": false}]}, "rb": {"body": "arg, [args*, ]inExpr", "dont_need_parenthesis": false, "name": "do", "examples": [{"dataset": null, "code": "r.do(r.table('marvel').get('IronMan')) { |ironman| ironman[:name] }.run(conn)", "description": "The object(s) passed to do() can be bound to name(s). The last argument is the expression to evaluate in the context of the bindings.", "can_try": false}]}, "js": {"body": "arg, [args*, ]inExpr", "dont_need_parenthesis": false, "name": "do", "examples": [{"dataset": "marvel", "code": "r.do(r.table('marvel').get('IronMan'),\n     function (ironman) { return ironman('name'); }\n).run(conn, callback)", "description": "The object(s) passed to do() can be bound to name(s). The last argument is the expression to evaluate in the context of the bindings.", "can_try": true}]}}, "order": 0}, {"description": "Evaluate one of two control paths based on the value of an expression. \n<code>branch</code> is effectively an <code>if</code> renamed due to\nlanguage constraints.<br /><br />\nThe type of the result is determined by the type of the branch that\ngets executed.\n", "parent": "r", "returns": "query", "tag": "branch", "langs": {"py": {"body": "test, true_branch, false_branch", "dont_need_parenthesis": false, "name": "branch", "examples": [{"dataset": null, "code": "r.table('marvel').map(r.branch(r.row['victories'] > 100,\n    r.row['name'] + ' is a superhero',\n    r.row['name'] + ' is a hero')\n).run(conn)", "description": "Return the manlier of two heroes:", "can_try": false}]}, "rb": {"body": "test, true_branch, false_branch", "dont_need_parenthesis": false, "name": "branch", "examples": [{"dataset": null, "code": "r.table('marvel').map { |row|  r.branch(row[:victories] > 100,\n    row[:name] + ' is a superhero',\n    row[:name] + ' is a hero')\n}.run(conn)", "description": "Return the manlier of two heroes:", "can_try": false}]}, "js": {"body": "test, trueBranch, falseBranch", "dont_need_parenthesis": false, "name": "branch", "examples": [{"dataset": "marvel", "code": "r.table('marvel').map(r.branch(r.row('victories').gt(100),\n    r.row('name').add(' is a superhero'),\n    r.row('name').add(' is a hero'))\n).run(conn, callback)", "description": "Return the manlier of two heroes:", "can_try": true}]}}, "order": 1}, {"description": "Loop over a sequence, evaluating the given write query for each element.", "parent": "r", "returns": "query", "tag": "foreach", "langs": {"py": {"body": "query_function", "dont_need_parenthesis": false, "name": "foreach", "examples": [{"dataset": null, "code": "r.table('marvel').for_each(\n    lambda hero: r.table('villains').get(hero['villainDefeated']).delete()\n).run(conn)", "description": "Now that our heroes have defeated their villains, we can safely remove them from the villain table.", "can_try": false}]}, "rb": {"body": "query_function", "dont_need_parenthesis": false, "name": "foreach", "examples": [{"dataset": null, "code": "r.table('marvel').for_each {|hero|\n  r.table('villains').get(hero[:villain_defeated]).delete\n}.run(conn)", "description": "Now that our heroes have defeated their villains, we can safely remove them from the villain table.", "can_try": false}]}, "js": {"body": "queryFunction", "dont_need_parenthesis": false, "name": "foreach", "examples": [{"dataset": "marvel", "code": "r.table('marvel').forEach(function(hero) {\n return r.table('villains').get(hero('villainDefeated')).delete()\n}).run(conn, callback)", "description": "Now that our heroes have defeated their villains, we can safely remove them from the villain table.", "can_try": true}]}}, "order": 2}, {"description": "Throw a runtime error.", "parent": "r", "returns": "error", "tag": "error", "langs": {"py": {"body": "message", "dont_need_parenthesis": false, "name": "error", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').do(\n  lambda ironman: r.branch(ironman['victories'] < ironman['battles'],\n                            r.error('impossible code path'),\n                            ironman)\n).run(conn)", "description": "Iron Man can't possibly have lost a battle:", "can_try": false}]}, "rb": {"body": "message", "dont_need_parenthesis": false, "name": "error", "examples": [{"dataset": null, "code": "r.table('marvel').get('IronMan').do { |ironman|\n  r.branch(ironman[:victories] < ironman[:battles],\n    r.error('impossible code path'),\n    ironman)\n}.run(conn)", "description": "Iron Man can't possibly have lost a battle:", "can_try": false}]}, "js": {"body": "message", "dont_need_parenthesis": false, "name": "error", "examples": [{"dataset": "marvel", "code": "r.table('marvel').get('IronMan').do(function(ironman) {\n return r.branch(ironman('victories').lt(ironman('battles')),\n  r.error('impossible code path'),\n  ironman)\n}).run(conn, callback)", "description": "Iron Man can't possibly have lost a battle:", "can_try": true}]}}, "order": 3}, {"description": "Construct a RQL JSON object from a native object.", "parent": "r", "returns": "json", "tag": "expr", "langs": {"py": {"body": "obj", "dont_need_parenthesis": false, "name": "expr", "examples": [{"dataset": null, "code": "r.expr({'a':'b'}).merge({'b':[1,2,3]}).run(conn)", "description": "Objects wrapped with expr can then be manipulated by RQL API functions.", "can_try": false}]}, "rb": {"body": "obj", "dont_need_parenthesis": false, "name": "expr", "examples": [{"dataset": null, "code": "r.expr({:a => 'b'}).merge({:b => [1,2,3]}).run(conn)", "description": "Objects wrapped with expr can then be manipulated by RQL API functions.", "can_try": false}, {"dataset": null, "code": "r({:a => 'b'}).merge({:b => [1,2,3]}).run(conn)", "description": "In Ruby, you can also do this with just r.", "can_try": false}]}, "js": {"body": "obj", "dont_need_parenthesis": false, "name": "expr", "examples": [{"dataset": "marvel", "code": "r.expr({a:'b'}).merge({b:[1,2,3]}).run(conn, callback)", "description": "Objects wrapped with expr can then be manipulated by RQL API functions.", "can_try": true}, {"dataset": "marvel", "code": "r({a: 'b'}).merge({b: [1,2,3]}).run(conn, callback)", "description": "In JavaScript, you can also do this with just r.", "can_try": true}]}}, "order": 4}, {"description": "Create a javascript expression.", "parent": "r", "returns": "json", "tag": "js", "langs": {"py": {"body": "jsstring", "dont_need_parenthesis": false, "name": "js", "examples": [{"dataset": null, "code": "r.js(\"'str1' + 'str2'\").run(conn)", "description": "Concatenate two strings using Javascript'", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter(\n  r.js('(function (row) { return row.magazines > 5; })')).run(conn)", "description": "Select all documents where the 'magazines' field is greater than 5 by running Javascript on the server.", "can_try": false}, {"dataset": null, "code": "r.js('while(true) {}', timeout=1.3).run(conn)", "description": "You may also specify a timeout in seconds (defaults to 5).", "can_try": false}]}, "rb": {"body": "jsstring", "dont_need_parenthesis": false, "name": "js", "examples": [{"dataset": null, "code": "r.js(\"'str1' + 'str2'\").run(conn)", "description": "Concatenate two strings using Javascript'", "can_try": false}, {"dataset": null, "code": "r.table('marvel').filter(\n  r.js('(function (row) { return row.magazines > 5; })')).run(conn)", "description": "Select all documents where the 'magazines' field is greater than 5 by running Javascript on the server.", "can_try": false}, {"dataset": null, "code": "r.js('while(true) {}', :timeout => 1.3).run(conn)", "description": "You may also specify a timeout in seconds (defaults to 5).", "can_try": false}]}, "js": {"body": "jsstring", "dont_need_parenthesis": false, "name": "js", "examples": [{"dataset": "marvel", "code": "r.js(\"'str1' + 'str2'\").run(conn, callback)", "description": "Concatenate two strings using Javascript'", "can_try": true}, {"dataset": "marvel", "code": "js: r.js('while(true) {}', {timeout:1.3}).run(conn, callback)", "description": "Select all documents where the 'magazines' field is greater than 5 by running Javascript on the server.", "can_try": true}, {"dataset": null, "code": "r.js('while(true) {}', {timeout:1.3}).run(conn, callback)", "description": "You may also specify a timeout in seconds (defaults to 5).", "can_try": false}]}}, "order": 5}, {"description": "Converts a value of one type into another. <br /><br />\nYou can convert: a selection, sequence, or object into an ARRAY, \nan array of pairs into an OBJECT, and any DATUM into a STRING.\n", "parent": "json", "returns": "json", "tag": "coerce_to", "langs": {"py": {"body": "typename", "dont_need_parenthesis": false, "name": "coerce_to", "examples": [{"dataset": null, "code": "r.table('marvel').coerce_to('array').run(conn)", "description": "Convert a table to an array.", "can_try": false}, {"dataset": null, "code": "r.expr([['name', 'Ironman'], ['victories', 2000]]).coerce_to('object').run(conn)", "description": "Convert an array of pairs into an object.", "can_try": false}, {"dataset": null, "code": "r.expr(1).coerce_to('string').run(conn)", "description": "Convert a number to a string.", "can_try": false}]}, "rb": {"body": "typename", "dont_need_parenthesis": false, "name": "coerce_to", "examples": [{"dataset": null, "code": "r.table('marvel').coerce_to('array').run(conn)", "description": "Convert a table to an array.", "can_try": false}, {"dataset": null, "code": "r.expr([['name', 'Ironman'], ['victories', 2000]]).coerce_to('object').run(conn)", "description": "Convert an array of pairs into an object.", "can_try": false}, {"dataset": null, "code": "r.expr(1).coerce_to('string').run(conn)", "description": "Convert a number to a string.", "can_try": false}]}, "js": {"body": "typename", "dont_need_parenthesis": false, "name": "coerceTo", "examples": [{"dataset": "marvel", "code": "r.table('marvel').coerceTo('array').run(conn, callback)", "description": "Convert a table to an array.", "can_try": true}, {"dataset": "marvel", "code": "r.expr([['name', 'Ironman'], ['victories', 2000]]).coerceTo('object')\n .run(conn, callback)\n", "description": "Convert an array of pairs into an object.", "can_try": true}, {"dataset": "marvel", "code": "r.expr(1).coerceTo('string').run(conn, callback)", "description": "Convert a number to a string.", "can_try": true}]}}, "order": 6}, {"description": "Gets the type of a value.", "parent": "value", "returns": "string", "tag": "type_of", "langs": {"py": {"body": "", "dont_need_parenthesis": false, "name": "type_of", "examples": [{"dataset": null, "code": "r.expr(\"foo\").type_of().run(conn)", "description": "Get the type of a string.", "can_try": false}]}, "rb": {"body": "", "dont_need_parenthesis": false, "name": "type_of", "examples": [{"dataset": null, "code": "r.expr(\"foo\").type_of().run(conn)", "description": "Get the type of a string.", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": false, "name": "typeOf", "examples": [{"dataset": "marvel", "code": "r.expr(\"foo\").typeOf().run(conn, callback)", "description": "Get the type of a string.", "can_try": true}]}}, "order": 7}, {"description": "Get information about a RQL value.", "parent": "value", "returns": "object", "tag": "info", "langs": {"py": {"body": "", "dont_need_parenthesis": false, "name": "info", "examples": [{"dataset": null, "code": "r.table('marvel').info().run(conn)", "description": "Get information about a table such as primary key, or cache size.\n", "can_try": false}]}, "rb": {"body": "", "dont_need_parenthesis": false, "name": "info", "examples": [{"dataset": null, "code": "r.table('marvel').info().run(conn)", "description": "Get information about a table such as primary key, or cache size.\n", "can_try": false}]}, "js": {"body": "", "dont_need_parenthesis": false, "name": "info", "examples": [{"dataset": null, "code": "r.table('marvel').info().run(conn, callback)", "description": "Get information about a table such as primary key, or cache size.\n", "can_try": false}]}}, "order": 8}], "tag": "control", "name": "Control Structures", "description": "These commands provide basic control structures for the composition of complex queries."}], "types": {"selection": {"parents": ["sequence"]}, "sequence": {"parents": ["query"]}, "object": {"parents": ["json"]}, "db": {"parents": null}, "number": {"parents": ["json"]}, "json": {"parents": null}, "cursor": {"parents": null}, "connection": {"parents": null}, "r": {"parents": null}, "bool": {"parents": ["json"]}, "error": {"parents": null}, "query": {"parents": null}, "array": {"parents": ["sequence"]}, "null": {"parents": ["json"]}, "table": {"parents": ["selection"]}}}